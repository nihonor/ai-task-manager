{
  "openapi": "3.0.0",
  "info": {
    "title": "AI Task Manager API",
    "version": "1.0.0",
    "description": "Comprehensive API documentation for the AI Task Manager SaaS platform with task management, AI features, team management, gamification, analytics, and more."
  },
  "servers": [
    { "url": "http://localhost:5000/api", "description": "Development server" },
    { "url": "https://api.moveit.com/api", "description": "Production server" }
  ],
  "components": {
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    },
    "schemas": {
      "Task": {
        "type": "object",
        "properties": {
          "title": { "type": "string" },
          "description": { "type": "string" },
          "status": { "type": "string", "enum": ["pending", "in_progress", "completed", "cancelled"] },
          "priority": { "type": "string", "enum": ["low", "medium", "high", "urgent"] },
          "assignedTo": { "type": "string" },
          "assignedBy": { "type": "string" },
          "project": { "type": "string" },
          "team": { "type": "string" },
          "deadline": { "type": "string", "format": "date-time" },
          "estimatedHours": { "type": "number" },
          "actualHours": { "type": "number" },
          "progress": { "type": "number", "minimum": 0, "maximum": 100 },
          "tags": { "type": "array", "items": { "type": "string" } }
        },
        "required": ["title", "status", "priority"]
      },
      "User": {
        "type": "object",
        "properties": {
          "name": { "type": "string" },
          "email": { "type": "string" },
          "role": { "type": "string", "enum": ["admin", "manager", "employee", "viewer"] },
          "department": { "type": "string" },
          "team": { "type": "string" },
          "position": { "type": "string" },
          "status": { "type": "string", "enum": ["active", "inactive", "suspended"] }
        },
        "required": ["name", "email", "role"]
      },
      "Team": {
        "type": "object",
        "properties": {
          "name": { "type": "string" },
          "description": { "type": "string" },
          "department": { "type": "string" },
          "members": { "type": "array", "items": { "type": "string" } },
          "leader": { "type": "string" }
        },
        "required": ["name"]
      },
      "KPI": {
        "type": "object",
        "properties": {
          "name": { "type": "string" },
          "description": { "type": "string" },
          "category": { "type": "string" },
          "targetValue": { "type": "number" },
          "currentValue": { "type": "number" },
          "unit": { "type": "string" },
          "period": { "type": "string", "enum": ["daily", "weekly", "monthly", "quarterly", "yearly"] },
          "assignedTo": { "type": "string" }
        },
        "required": ["name", "targetValue", "assignedTo"]
      },
      "Goal": {
        "type": "object",
        "properties": {
          "title": { "type": "string" },
          "description": { "type": "string" },
          "type": { "type": "string", "enum": ["personal", "team", "department", "organization"] },
          "targetValue": { "type": "number" },
          "currentValue": { "type": "number" },
          "deadline": { "type": "string", "format": "date-time" },
          "assignedTo": { "type": "string" }
        },
        "required": ["title", "type", "targetValue"]
      },
      "Badge": {
        "type": "object",
        "properties": {
          "id": { "type": "string" },
          "name": { "type": "string" },
          "description": { "type": "string" },
          "icon": { "type": "string" },
          "category": { "type": "string", "enum": ["achievement", "milestone", "special", "team", "department"] },
          "points": { "type": "number", "minimum": 0 },
          "rarity": { "type": "string", "enum": ["common", "uncommon", "rare", "epic", "legendary"] },
          "criteria": { "type": "string" },
          "isActive": { "type": "boolean", "default": true }
        },
        "required": ["name", "description", "category"]
      },
      "UserBadge": {
        "type": "object",
        "properties": {
          "id": { "type": "string" },
          "userId": { "type": "string" },
          "badgeId": { "type": "string" },
          "awardedAt": { "type": "string", "format": "date-time" },
          "awardedBy": { "type": "string" },
          "reason": { "type": "string" },
          "badge": { "$ref": "#/components/schemas/Badge" }
        },
        "required": ["userId", "badgeId", "awardedAt"]
      },
      "AwardedBadge": {
        "type": "object",
        "properties": {
          "id": { "type": "string" },
          "userId": { "type": "string" },
          "badgeId": { "type": "string" },
          "awardedAt": { "type": "string", "format": "date-time" },
          "awardedBy": { "type": "string" },
          "reason": { "type": "string" },
          "message": { "type": "string" }
        },
        "required": ["userId", "badgeId", "awardedAt"]
      },
      "Achievement": {
        "type": "object",
        "properties": {
          "id": { "type": "string" },
          "name": { "type": "string" },
          "description": { "type": "string" },
          "icon": { "type": "string" },
          "category": { "type": "string", "enum": ["productivity", "collaboration", "learning", "leadership", "innovation"] },
          "points": { "type": "number", "minimum": 0 },
          "criteria": { "type": "string" },
          "isActive": { "type": "boolean", "default": true }
        },
        "required": ["name", "description", "category"]
      },
      "UnlockedAchievement": {
        "type": "object",
        "properties": {
          "id": { "type": "string" },
          "userId": { "type": "string" },
          "achievementId": { "type": "string" },
          "unlockedAt": { "type": "string", "format": "date-time" },
          "achievement": { "$ref": "#/components/schemas/Achievement" }
        },
        "required": ["userId", "achievementId", "unlockedAt"]
      },
      "LeaderboardEntry": {
        "type": "object",
        "properties": {
          "rank": { "type": "integer", "minimum": 1 },
          "userId": { "type": "string" },
          "userName": { "type": "string" },
          "userEmail": { "type": "string" },
          "points": { "type": "number", "minimum": 0 },
          "badges": { "type": "integer", "minimum": 0 },
          "achievements": { "type": "integer", "minimum": 0 },
          "streaks": { "type": "integer", "minimum": 0 }
        },
        "required": ["rank", "userId", "userName", "points"]
      },
      "UserStreaks": {
        "type": "object",
        "properties": {
          "userId": { "type": "string" },
          "currentStreak": { "type": "integer", "minimum": 0 },
          "longestStreak": { "type": "integer", "minimum": 0 },
          "totalStreaks": { "type": "integer", "minimum": 0 },
          "lastActivity": { "type": "string", "format": "date-time" },
          "streakType": { "type": "string", "enum": ["daily", "weekly", "monthly"] },
          "nextMilestone": { "type": "integer" }
        },
        "required": ["userId", "currentStreak", "longestStreak"]
      },
      "PointsTransaction": {
        "type": "object",
        "properties": {
          "id": { "type": "string" },
          "userId": { "type": "string" },
          "points": { "type": "number" },
          "reason": { "type": "string" },
          "source": { "type": "string", "enum": ["task", "achievement", "streak", "bonus", "other"] },
          "transactionDate": { "type": "string", "format": "date-time" },
          "balance": { "type": "number" }
        },
        "required": ["userId", "points", "reason", "source"]
      },
      "PointsHistoryEntry": {
        "type": "object",
        "properties": {
          "id": { "type": "string" },
          "userId": { "type": "string" },
          "points": { "type": "number" },
          "reason": { "type": "string" },
          "source": { "type": "string", "enum": ["task", "achievement", "streak", "bonus", "other"] },
          "transactionDate": { "type": "string", "format": "date-time" },
          "balance": { "type": "number" }
        },
        "required": ["userId", "points", "reason", "source"]
      },
      "StreakUpdate": {
        "type": "object",
        "properties": {
          "userId": { "type": "string" },
          "action": { "type": "string", "enum": ["increment", "reset", "maintain"] },
          "previousStreak": { "type": "integer", "minimum": 0 },
          "newStreak": { "type": "integer", "minimum": 0 },
          "updatedAt": { "type": "string", "format": "date-time" },
          "message": { "type": "string" }
        },
        "required": ["userId", "action", "newStreak"]
      },
      "TimerSession": {
        "type": "object",
        "properties": {
          "id": { "type": "string" },
          "userId": { "type": "string" },
          "taskId": { "type": "string" },
          "type": { "type": "string", "enum": ["pomodoro", "short_break", "long_break", "custom"] },
          "duration": { "type": "number", "minimum": 1 },
          "startTime": { "type": "string", "format": "date-time" },
          "status": { "type": "string", "enum": ["active", "paused", "completed", "stopped"] },
          "remainingTime": { "type": "number", "minimum": 0 }
        },
        "required": ["id", "userId", "type", "duration", "startTime", "status"]
      },
      "PausedTimerSession": {
        "type": "object",
        "properties": {
          "sessionId": { "type": "string" },
          "pausedAt": { "type": "string", "format": "date-time" },
          "status": { "type": "string", "enum": ["paused"] },
          "remainingTime": { "type": "number", "minimum": 0 }
        },
        "required": ["sessionId", "pausedAt", "status", "remainingTime"]
      },
      "StoppedTimerSession": {
        "type": "object",
        "properties": {
          "sessionId": { "type": "string" },
          "stoppedAt": { "type": "string", "format": "date-time" },
          "status": { "type": "string", "enum": ["stopped"] },
          "totalTime": { "type": "number", "minimum": 0 },
          "completed": { "type": "boolean" }
        },
        "required": ["sessionId", "stoppedAt", "status", "totalTime", "completed"]
      },
      "TimerSettings": {
        "type": "object",
        "properties": {
          "pomodoroTime": { "type": "number", "minimum": 1, "maximum": 120, "description": "Pomodoro session duration in minutes" },
          "shortBreakTime": { "type": "number", "minimum": 1, "maximum": 30, "description": "Short break duration in minutes" },
          "longBreakTime": { "type": "number", "minimum": 1, "maximum": 60, "description": "Long break duration in minutes" },
          "autoStartBreaks": { "type": "boolean", "description": "Automatically start breaks after pomodoros" },
          "autoStartPomodoros": { "type": "boolean", "description": "Automatically start pomodoros after breaks" },
          "soundEnabled": { "type": "boolean", "description": "Enable/disable timer sounds" }
        }
      },
      "TimerStats": {
        "type": "object",
        "properties": {
          "total": {
            "type": "object",
            "properties": {
              "pomodoros": { "type": "integer", "description": "Total number of completed pomodoros" },
              "breaks": { "type": "integer", "description": "Total number of completed breaks" },
              "focusTime": { "type": "integer", "description": "Total focus time in minutes" }
            }
          },
          "today": {
            "type": "object",
            "properties": {
              "pomodoros": { "type": "integer", "description": "Today's completed pomodoros" },
              "focusTime": { "type": "integer", "description": "Today's focus time in minutes" }
            }
          },
          "weekly": {
            "type": "object",
            "properties": {
              "pomodoros": { "type": "integer", "description": "This week's completed pomodoros" },
              "focusTime": { "type": "integer", "description": "This week's focus time in minutes" }
            }
          }
        }
      },
      "FocusSession": {
        "type": "object",
        "properties": {
          "userId": { "type": "string" },
          "enabled": { "type": "boolean" },
          "startTime": { "type": "string", "format": "date-time" },
          "duration": { "type": "number", "minimum": 15, "maximum": 480 },
          "notifications": { "type": "boolean" },
          "status": { "type": "string", "enum": ["active"] }
        },
        "required": ["userId", "enabled", "startTime", "duration", "status"]
      },
      "CompletedFocusSession": {
        "type": "object",
        "properties": {
          "userId": { "type": "string" },
          "enabled": { "type": "boolean" },
          "endTime": { "type": "string", "format": "date-time" },
          "totalDuration": { "type": "number", "minimum": 0 },
          "status": { "type": "string", "enum": ["completed"] }
        },
        "required": ["userId", "enabled", "endTime", "totalDuration", "status"]
      },
      "FocusStatus": {
        "type": "object",
        "properties": {
          "userId": { "type": "string" },
          "enabled": { "type": "boolean" },
          "currentSession": { "$ref": "#/components/schemas/FocusSession" },
          "totalFocusTime": { "type": "number", "minimum": 0 },
          "todayFocusTime": { "type": "number", "minimum": 0 },
          "weeklyFocusTime": { "type": "number", "minimum": 0 }
        },
        "required": ["userId", "enabled", "totalFocusTime", "todayFocusTime", "weeklyFocusTime"]
      },
      "FocusNotificationSettings": {
        "type": "object",
        "properties": {
          "userId": { "type": "string" },
          "enabled": { "type": "boolean" },
          "types": { "type": "array", "items": { "type": "string", "enum": ["break", "session_end", "focus_reminder"] } },
          "frequency": { "type": "string", "enum": ["low", "normal", "high"] },
          "updatedAt": { "type": "string", "format": "date-time" }
        },
        "required": ["userId", "enabled"]
      },
      "File": {
        "type": "object",
        "properties": {
          "filename": { "type": "string", "description": "Unique filename on server" },
          "originalName": { "type": "string", "description": "Original filename from user" },
          "url": { "type": "string", "description": "File access URL" },
          "fileType": { "type": "string", "description": "File extension" },
          "fileSize": { "type": "number", "description": "File size in bytes" },
          "mimeType": { "type": "string", "description": "MIME type of the file" },
          "uploadedBy": { "type": "string", "description": "User ID who uploaded the file" },
          "task": { "type": "string", "description": "Associated task ID" },
          "project": { "type": "string", "description": "Associated project ID" },
          "team": { "type": "string", "description": "Associated team ID" },
          "department": { "type": "string", "description": "Associated department ID" },
          "conversation": { "type": "string", "description": "Associated conversation ID" },
          "category": { "type": "string", "enum": ["document", "image", "video", "audio", "archive", "other"], "description": "File category" },
          "tags": { "type": "array", "items": { "type": "string" }, "description": "File tags" },
          "description": { "type": "string", "description": "File description" },
          "isPublic": { "type": "boolean", "description": "Whether file is publicly accessible" },
          "isShared": { "type": "boolean", "description": "Whether file is shared with others" },
          "sharedWith": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "user": { "type": "string", "description": "User ID shared with" },
                "permission": { "type": "string", "enum": ["view", "edit", "admin"], "description": "Permission level" },
                "sharedAt": { "type": "string", "format": "date-time", "description": "When file was shared" }
              }
            },
            "description": "List of users file is shared with"
          },
          "downloadCount": { "type": "number", "description": "Number of times file was downloaded" },
          "lastDownloaded": { "type": "string", "format": "date-time", "description": "Last download timestamp" },
          "isDeleted": { "type": "boolean", "description": "Whether file is soft deleted" },
          "deletedAt": { "type": "string", "format": "date-time", "description": "Deletion timestamp" },
          "deletedBy": { "type": "string", "description": "User ID who deleted the file" },
          "createdAt": { "type": "string", "format": "date-time", "description": "Upload timestamp" },
          "updatedAt": { "type": "string", "format": "date-time", "description": "Last update timestamp" }
        },
        "required": ["filename", "originalName", "url", "uploadedBy"]
      },
      "Department": {
        "type": "object",
        "properties": {
          "id": { "type": "string", "description": "Unique department identifier" },
          "name": { "type": "string", "description": "Department name" },
          "description": { "type": "string", "description": "Department description" },
          "code": { "type": "string", "description": "Unique department code" },
          "head": { "$ref": "#/components/schemas/User", "description": "Department head user" },
          "parentDepartment": { "$ref": "#/components/schemas/Department", "description": "Parent department reference" },
          "settings": {
            "type": "object",
            "properties": {
              "allowTeamCreation": { "type": "boolean", "description": "Allow teams to be created in this department" },
              "allowUserManagement": { "type": "boolean", "description": "Allow user management within department" },
              "allowKPIManagement": { "type": "boolean", "description": "Allow KPI management within department" }
            }
          },
          "color": { "type": "string", "description": "Department color for UI" },
          "icon": { "type": "string", "description": "Department icon identifier" },
          "isActive": { "type": "boolean", "description": "Department active status" },
          "createdAt": { "type": "string", "format": "date-time", "description": "Creation timestamp" },
          "updatedAt": { "type": "string", "format": "date-time", "description": "Last update timestamp" }
        },
        "required": ["name"]
      },
      "Role": {
        "type": "object",
        "properties": {
          "id": { "type": "string", "description": "Unique role identifier" },
          "name": { "type": "string", "description": "Role name" },
          "description": { "type": "string", "description": "Role description" },
          "permissions": { "type": "array", "items": { "$ref": "#/components/schemas/Permission" }, "description": "Role permissions" },
          "department": { "$ref": "#/components/schemas/Department", "description": "Associated department" },
          "team": { "type": "string", "description": "Associated team ID" },
          "level": { "type": "integer", "description": "Hierarchy level" },
          "color": { "type": "string", "description": "Role color for UI" },
          "icon": { "type": "string", "description": "Role icon identifier" },
          "isActive": { "type": "boolean", "description": "Role active status" },
          "isSystem": { "type": "boolean", "description": "Whether this is a system role" },
          "createdBy": { "$ref": "#/components/schemas/User", "description": "User who created the role" },
          "createdAt": { "type": "string", "format": "date-time", "description": "Creation timestamp" },
          "updatedAt": { "type": "string", "format": "date-time", "description": "Last update timestamp" }
        },
        "required": ["name"]
      },
      "Permission": {
        "type": "object",
        "properties": {
          "id": { "type": "string", "description": "Permission identifier" },
          "name": { "type": "string", "description": "Permission name" },
          "description": { "type": "string", "description": "Permission description" },
          "resource": { "type": "string", "description": "Resource this permission applies to" },
          "action": { "type": "string", "enum": ["create", "read", "update", "delete", "manage"], "description": "Action allowed" },
          "scope": { "type": "string", "enum": ["own", "department", "team", "global"], "description": "Permission scope" }
        },
        "required": ["name", "resource", "action"]
      },
      "TaskReport": {
        "type": "object",
        "properties": {
          "userId": { "type": "string", "description": "User ID for the report" },
          "timeframe": { "type": "string", "enum": ["week", "month", "quarter", "year"], "description": "Report timeframe" },
          "status": { "type": "string", "enum": ["all", "pending", "inProgress", "completed", "overdue"], "description": "Status filter applied" },
          "priority": { "type": "string", "enum": ["all", "high", "medium", "low"], "description": "Priority filter applied" },
          "summary": {
            "type": "object",
            "properties": {
              "totalTasks": { "type": "integer", "description": "Total number of tasks" },
              "completed": { "type": "integer", "description": "Number of completed tasks" },
              "inProgress": { "type": "integer", "description": "Number of in-progress tasks" },
              "pending": { "type": "integer", "description": "Number of pending tasks" },
              "overdue": { "type": "integer", "description": "Number of overdue tasks" }
            }
          },
          "breakdown": {
            "type": "object",
            "properties": {
              "byPriority": {
                "type": "object",
                "properties": {
                  "high": { "type": "integer" },
                  "medium": { "type": "integer" },
                  "low": { "type": "integer" }
                }
              },
              "byStatus": {
                "type": "object",
                "properties": {
                  "completed": { "type": "integer" },
                  "inProgress": { "type": "integer" },
                  "pending": { "type": "integer" },
                  "overdue": { "type": "integer" }
                }
              }
            }
          }
        }
      },
      "ProductivityReport": {
        "type": "object",
        "properties": {
          "userId": { "type": "string", "description": "User ID for the report" },
          "timeframe": { "type": "string", "enum": ["week", "month", "quarter", "year"], "description": "Report timeframe" },
          "metrics": { "type": "string", "enum": ["all", "efficiency", "quality", "collaboration"], "description": "Metrics included" },
          "productivityScore": { "type": "number", "description": "Overall productivity score" },
          "efficiency": { "type": "number", "description": "Efficiency rating" },
          "quality": { "type": "number", "description": "Quality rating" },
          "trends": {
            "type": "object",
            "properties": {
              "weekly": { "type": "array", "items": { "type": "number" }, "description": "Weekly productivity trends" },
              "monthly": { "type": "array", "items": { "type": "number" }, "description": "Monthly productivity trends" }
            }
          },
          "recommendations": { "type": "array", "items": { "type": "string" }, "description": "Productivity improvement recommendations" }
        }
      },
      "TeamReport": {
        "type": "object",
        "properties": {
          "teamId": { "type": "string", "description": "Team ID for the report" },
          "timeframe": { "type": "string", "enum": ["week", "month", "quarter", "year"], "description": "Report timeframe" },
          "reportType": { "type": "string", "enum": ["overview", "performance", "collaboration", "productivity"], "description": "Type of team report" },
          "teamPerformance": {
            "type": "object",
            "properties": {
              "overallScore": { "type": "number", "description": "Overall team performance score" },
              "productivity": { "type": "number", "description": "Team productivity rating" },
              "collaboration": { "type": "number", "description": "Team collaboration rating" },
              "quality": { "type": "number", "description": "Team quality rating" }
            }
          },
          "memberPerformance": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "userId": { "type": "string" },
                "name": { "type": "string" },
                "score": { "type": "number" },
                "tasksCompleted": { "type": "integer" }
              }
            }
          },
          "insights": { "type": "array", "items": { "type": "string" }, "description": "Team performance insights" }
        }
      },
      "PerformanceReport": {
        "type": "object",
        "properties": {
          "userId": { "type": "string", "description": "User ID for the report" },
          "timeframe": { "type": "string", "enum": ["week", "month", "quarter", "year"], "description": "Report timeframe" },
          "comparison": { "type": "string", "enum": ["previous_period", "same_period_last_year", "custom"], "description": "Comparison period" },
          "currentPerformance": {
            "type": "object",
            "properties": {
              "score": { "type": "number", "description": "Current performance score" },
              "rank": { "type": "integer", "description": "Current rank" },
              "percentile": { "type": "number", "description": "Current percentile" }
            }
          },
          "previousPerformance": {
            "type": "object",
            "properties": {
              "score": { "type": "number", "description": "Previous performance score" },
              "rank": { "type": "integer", "description": "Previous rank" },
              "percentile": { "type": "number", "description": "Previous percentile" }
            }
          },
          "improvement": {
            "type": "object",
            "properties": {
              "score": { "type": "number", "description": "Score improvement" },
              "rank": { "type": "integer", "description": "Rank improvement" },
              "percentile": { "type": "number", "description": "Percentile improvement" }
            }
          },
          "breakdown": {
            "type": "object",
            "properties": {
              "productivity": { "type": "number" },
              "efficiency": { "type": "number" },
              "quality": { "type": "number" },
              "collaboration": { "type": "number" }
            }
          }
        }
      },
      "ExportJob": {
        "type": "object",
        "properties": {
          "id": { "type": "string", "description": "Export job identifier" },
          "reportType": { "type": "string", "enum": ["tasks", "productivity", "team", "performance"], "description": "Type of report exported" },
          "format": { "type": "string", "enum": ["pdf", "excel", "csv", "json"], "description": "Export format" },
          "parameters": { "type": "object", "description": "Export parameters" },
          "timeframe": { "type": "string", "enum": ["week", "month", "quarter", "year"], "description": "Report timeframe" },
          "status": { "type": "string", "enum": ["processing", "completed", "failed"], "description": "Export job status" },
          "requestedBy": { "type": "string", "description": "User ID who requested export" },
          "requestedAt": { "type": "string", "format": "date-time", "description": "Export request timestamp" },
          "downloadUrl": { "type": "string", "description": "Download URL for completed export" }
        }
      },
      "SystemSettings": {
        "type": "object",
        "properties": {
          "appName": { "type": "string", "description": "Application name" },
          "version": { "type": "string", "description": "Application version" },
          "maintenanceMode": { "type": "boolean", "description": "Maintenance mode status" },
          "features": { "$ref": "#/components/schemas/FeatureSettings" },
          "limits": { "$ref": "#/components/schemas/SystemLimits" },
          "integrations": { "$ref": "#/components/schemas/IntegrationSettings" },
          "updatedBy": { "type": "string", "description": "User ID who last updated settings" },
          "updatedAt": { "type": "string", "format": "date-time", "description": "Last update timestamp" }
        },
        "required": ["appName", "version", "maintenanceMode"]
      },
      "FeatureSettings": {
        "type": "object",
        "properties": {
          "ai": { "$ref": "#/components/schemas/AIFeatureSettings" },
          "gamification": { "$ref": "#/components/schemas/GamificationSettings" },
          "pomodoro": { "$ref": "#/components/schemas/PomodoroSettings" },
          "realTime": { "$ref": "#/components/schemas/RealTimeSettings" }
        }
      },
      "AIFeatureSettings": {
        "type": "object",
        "properties": {
          "enabled": { "type": "boolean", "description": "AI features enabled" },
          "models": { "type": "array", "items": { "type": "string" }, "description": "Available AI models" },
          "maxTokens": { "type": "number", "description": "Maximum tokens per request" },
          "costPerRequest": { "type": "number", "description": "Cost per AI request" }
        },
        "required": ["enabled"]
      },
      "GamificationSettings": {
        "type": "object",
        "properties": {
          "enabled": { "type": "boolean", "description": "Gamification features enabled" },
          "points": { "type": "boolean", "description": "Points system enabled" },
          "badges": { "type": "boolean", "description": "Badge system enabled" },
          "leaderboards": { "type": "boolean", "description": "Leaderboard system enabled" },
          "streaks": { "type": "boolean", "description": "Streak tracking enabled" }
        },
        "required": ["enabled"]
      },
      "PomodoroSettings": {
        "type": "object",
        "properties": {
          "enabled": { "type": "boolean", "description": "Pomodoro timer enabled" },
          "defaultDuration": { "type": "number", "description": "Default pomodoro duration in minutes" },
          "shortBreak": { "type": "number", "description": "Short break duration in minutes" },
          "longBreak": { "type": "number", "description": "Long break duration in minutes" },
          "autoStartBreaks": { "type": "boolean", "description": "Auto-start breaks after pomodoros" }
        },
        "required": ["enabled"]
      },
      "RealTimeSettings": {
        "type": "object",
        "properties": {
          "enabled": { "type": "boolean", "description": "Real-time features enabled" },
          "websockets": { "type": "boolean", "description": "WebSocket connections enabled" },
          "notifications": { "type": "boolean", "description": "Real-time notifications enabled" },
          "liveUpdates": { "type": "boolean", "description": "Live data updates enabled" }
        },
        "required": ["enabled"]
      },
      "SystemLimits": {
        "type": "object",
        "properties": {
          "maxUsers": { "type": "number", "description": "Maximum number of users" },
          "maxTasks": { "type": "number", "description": "Maximum number of tasks" },
          "maxFileSize": { "type": "number", "description": "Maximum file size in bytes" },
          "maxProjects": { "type": "number", "description": "Maximum number of projects" }
        }
      },
      "IntegrationSettings": {
        "type": "object",
        "properties": {
          "slack": { "type": "boolean", "description": "Slack integration enabled" },
          "email": { "type": "boolean", "description": "Email integration enabled" },
          "webhooks": { "type": "boolean", "description": "Webhook integration enabled" }
        }
      },
      "UserPreferences": {
        "type": "object",
        "properties": {
          "userId": { "type": "string", "description": "User ID" },
          "theme": { "type": "string", "enum": ["light", "dark", "auto"], "description": "UI theme preference" },
          "language": { "type": "string", "description": "Language preference" },
          "timezone": { "type": "string", "description": "Timezone preference" },
          "dateFormat": { "type": "string", "description": "Date format preference" },
          "timeFormat": { "type": "string", "enum": ["12h", "24h"], "description": "Time format preference" },
          "notifications": { "$ref": "#/components/schemas/NotificationPreferences" },
          "dashboard": { "$ref": "#/components/schemas/DashboardPreferences" },
          "privacy": { "$ref": "#/components/schemas/PrivacyPreferences" },
          "productivity": { "$ref": "#/components/schemas/ProductivityPreferences" },
          "updatedAt": { "type": "string", "format": "date-time", "description": "Last update timestamp" }
        },
        "required": ["userId", "theme", "language", "timezone"]
      },
      "NotificationPreferences": {
        "type": "object",
        "properties": {
          "email": { "type": "boolean", "description": "Email notifications enabled" },
          "push": { "type": "boolean", "description": "Push notifications enabled" },
          "sms": { "type": "boolean", "description": "SMS notifications enabled" },
          "inApp": { "type": "boolean", "description": "In-app notifications enabled" },
          "frequency": { "type": "string", "enum": ["immediate", "hourly", "daily", "weekly"], "description": "Notification frequency" }
        }
      },
      "DashboardPreferences": {
        "type": "object",
        "properties": {
          "layout": { "type": "string", "description": "Dashboard layout preference" },
          "widgets": { "type": "array", "items": { "type": "string" }, "description": "Enabled dashboard widgets" },
          "refreshInterval": { "type": "number", "description": "Auto-refresh interval in seconds" }
        }
      },
      "DashboardData": {
        "type": "object",
        "properties": {
          "tasks": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/Task" },
            "description": "User's tasks"
          },
          "stats": {
            "type": "object",
            "properties": {
              "totalTasks": { "type": "integer", "description": "Total number of tasks" },
              "completedTasks": { "type": "integer", "description": "Number of completed tasks" },
              "pendingTasks": { "type": "integer", "description": "Number of pending tasks" },
              "overdueTasks": { "type": "integer", "description": "Number of overdue tasks" },
              "productivityScore": { "type": "integer", "description": "Productivity score (0-100)" },
              "streakDays": { "type": "integer", "description": "Current streak of productive days" }
            }
          }
        }
      },
      "PrivacyPreferences": {
        "type": "object",
        "properties": {
          "profileVisibility": { "type": "string", "enum": ["public", "team", "private"], "description": "Profile visibility level" },
          "activityVisibility": { "type": "string", "enum": ["public", "team", "private"], "description": "Activity visibility level" },
          "analyticsSharing": { "type": "boolean", "description": "Allow analytics data sharing" }
        }
      },
      "ProductivityPreferences": {
        "type": "object",
        "properties": {
          "focusMode": { "type": "boolean", "description": "Focus mode enabled" },
          "autoStartTimer": { "type": "boolean", "description": "Auto-start timer enabled" },
          "weeklyReports": { "type": "boolean", "description": "Weekly reports enabled" },
          "goalReminders": { "type": "boolean", "description": "Goal reminders enabled" }
        }
      },
      "WebSocketEvent": {
        "type": "object",
        "properties": {
          "event": { "type": "string", "description": "Event type" },
          "data": { "type": "object", "description": "Event data" },
          "timestamp": { "type": "string", "format": "date-time", "description": "Event timestamp" }
        }
      },
      "NotificationEvent": {
        "type": "object",
        "properties": {
          "event": { "type": "string", "enum": ["new-notification", "notification-read", "notification-deleted", "notifications-bulk-read"] },
          "data": { "oneOf": [
            { "$ref": "#/components/schemas/Notification" },
            { "type": "object", "properties": { "notificationId": { "type": "string" }, "read": { "type": "boolean" } } },
            { "type": "object", "properties": { "notificationId": { "type": "string" } } },
            { "type": "object", "properties": { "notificationIds": { "type": "array", "items": { "type": "string" } }, "read": { "type": "boolean" } } }
          ]},
          "timestamp": { "type": "string", "format": "date-time" }
        }
      },
      "ChatEvent": {
        "type": "object",
        "properties": {
          "event": { "type": "string", "enum": ["new-message", "message-updated", "message-deleted", "message-reaction"] },
          "data": { "oneOf": [
            { "$ref": "#/components/schemas/ChatMessage" },
            { "type": "object", "properties": { "messageId": { "type": "string" }, "content": { "type": "string" }, "attachments": { "type": "array" }, "editedAt": { "type": "string", "format": "date-time" }, "isEdited": { "type": "boolean" } } },
            { "type": "object", "properties": { "messageId": { "type": "string" } } },
            { "type": "object", "properties": { "messageId": { "type": "string" }, "reactions": { "type": "array" } } }
          ]},
          "timestamp": { "type": "string", "format": "date-time" }
        }
      },
      "TaskEvent": {
        "type": "object",
        "properties": {
          "event": { "type": "string", "enum": ["task-assigned", "task-updated", "task-status-updated", "task-progress-updated", "task-completed", "task-note-added"] },
          "data": { "oneOf": [
            { "$ref": "#/components/schemas/Task" },
            { "type": "object", "properties": { "taskId": { "type": "string" }, "status": { "type": "string" } } },
            { "type": "object", "properties": { "taskId": { "type": "string" }, "progress": { "type": "number" } } },
            { "type": "object", "properties": { "taskId": { "type": "string" } } },
            { "type": "object", "properties": { "taskId": { "type": "string" }, "comment": { "type": "object" } } }
          ]},
          "timestamp": { "type": "string", "format": "date-time" }
        }
      },
      "AnalyticsEvent": {
        "type": "object",
        "properties": {
          "event": { "type": "string", "enum": ["productivity-updated", "efficiency-updated", "quality-updated"] },
          "data": { "type": "object", "description": "Analytics data" },
          "timestamp": { "type": "string", "format": "date-time" }
        }
      },
      "SearchResults": {
        "type": "object",
        "properties": {
          "query": { "type": "string", "description": "Search query used" },
          "type": { "type": "string", "enum": ["all", "task", "user", "message"], "description": "Type of entities searched" },
          "totalResults": { "type": "integer", "description": "Total number of results found" },
          "results": {
            "type": "array",
            "items": {
              "oneOf": [
                { "$ref": "#/components/schemas/SearchResultItem" }
              ]
            }
          },
          "filters": { "type": "object", "description": "Applied search filters" },
          "searchTime": { "type": "string", "description": "Time taken for search" }
        }
      },
      "SearchResultItem": {
        "type": "object",
        "properties": {
          "type": { "type": "string", "enum": ["task", "user", "message"], "description": "Type of result item" },
          "id": { "type": "string", "description": "Unique identifier of the item" },
          "title": { "type": "string", "description": "Title or name of the item" },
          "description": { "type": "string", "description": "Description or content of the item" },
          "relevance": { "type": "number", "minimum": 0, "maximum": 1, "description": "Relevance score (0-1)" },
          "snippet": { "type": "string", "description": "Text snippet highlighting the match" }
        }
      },
      "TaskSearchResults": {
        "type": "object",
        "properties": {
          "query": { "type": "string", "description": "Search query used" },
          "filters": {
            "type": "object",
            "properties": {
              "status": { "type": "string", "enum": ["all", "pending", "in_progress", "completed", "cancelled"] },
              "priority": { "type": "string", "enum": ["all", "low", "medium", "high", "urgent"] },
              "assignedTo": { "type": "string" },
              "deadline": { "type": "string", "enum": ["all", "overdue", "today", "week"] },
              "tags": { "type": "array", "items": { "type": "string" } }
            }
          },
          "totalResults": { "type": "integer", "description": "Total number of results found" },
          "results": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": { "type": "string" },
                "title": { "type": "string" },
                "description": { "type": "string" },
                "status": { "type": "string" },
                "priority": { "type": "string" },
                "assignedTo": { "type": "string" },
                "team": { "type": "string" },
                "deadline": { "type": "string", "format": "date-time" },
                "tags": { "type": "array", "items": { "type": "string" } },
                "createdBy": { "type": "string" },
                "createdAt": { "type": "string", "format": "date-time" },
                "relevance": { "type": "number", "minimum": 0, "maximum": 1 }
              }
            }
          },
          "pagination": {
            "type": "object",
            "properties": {
              "page": { "type": "integer" },
              "limit": { "type": "integer" },
              "totalPages": { "type": "integer" }
            }
          },
          "searchTime": { "type": "string", "description": "Time taken for search" }
        }
      },
      "UserSearchResults": {
        "type": "object",
        "properties": {
          "query": { "type": "string", "description": "Search query used" },
          "filters": {
            "type": "object",
            "properties": {
              "department": { "type": "string" },
              "role": { "type": "string" },
              "skills": { "type": "array", "items": { "type": "string" } },
              "location": { "type": "string" }
            }
          },
          "totalResults": { "type": "integer", "description": "Total number of results found" },
          "results": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": { "type": "string" },
                "name": { "type": "string" },
                "email": { "type": "string" },
                "role": { "type": "string" },
                "department": { "type": "string" },
                "team": { "type": "string" },
                "skills": { "type": "array", "items": { "type": "string" } },
                "location": { "type": "string" },
                "avatar": { "type": "string" },
                "isActive": { "type": "boolean" },
                "relevance": { "type": "number", "minimum": 0, "maximum": 1 }
              }
            }
          },
          "pagination": {
            "type": "object",
            "properties": {
              "page": { "type": "integer" },
              "limit": { "type": "integer" },
              "totalPages": { "type": "integer" }
            }
          },
          "searchTime": { "type": "string", "description": "Time taken for search" }
        }
      },
      "MessageSearchResults": {
        "type": "object",
        "properties": {
          "query": { "type": "string", "description": "Search query used" },
          "filters": {
            "type": "object",
            "properties": {
              "conversationId": { "type": "string" },
              "sender": { "type": "string" },
              "dateRange": { "type": "string" },
              "type": { "type": "string", "enum": ["all", "text", "file", "image", "video"] }
            }
          },
          "totalResults": { "type": "integer", "description": "Total number of results found" },
          "results": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": { "type": "string" },
                "content": { "type": "string" },
                "sender": { "type": "string" },
                "senderId": { "type": "string" },
                "conversationId": { "type": "string" },
                "conversationName": { "type": "string" },
                "conversationType": { "type": "string" },
                "timestamp": { "type": "string", "format": "date-time" },
                "type": { "type": "string" },
                "attachments": { "type": "array", "items": { "type": "object" } },
                "relevance": { "type": "number", "minimum": 0, "maximum": 1 },
                "snippet": { "type": "string" }
              }
            }
          },
          "pagination": {
            "type": "object",
            "properties": {
              "page": { "type": "integer" },
              "limit": { "type": "integer" },
              "totalPages": { "type": "integer" }
            }
          },
          "searchTime": { "type": "string", "description": "Time taken for search" }
        }
      }
    }
  },
  "security": [
    { "bearerAuth": [] }
  ],
  "tags": [
    { "name": "Authentication", "description": "User authentication and authorization endpoints" },
    { "name": "Tasks", "description": "Task management operations" },
    { "name": "KPI & Goals", "description": "KPI tracking and goal management" },
    { "name": "Dashboard", "description": "Dashboard and overview data" },
    { "name": "Messaging", "description": "Chat and messaging system" },
    { "name": "Notifications", "description": "User notification management" },
    { "name": "Users", "description": "User management operations" },
    { "name": "Teams", "description": "Team management operations" },
    { "name": "AI Features", "description": "AI-powered features and tools" },
    { "name": "Gamification", "description": "Gamification and rewards system" },
    { "name": "Timer", "description": "Pomodoro timer and time tracking" },
    { "name": "Goals", "description": "Goal setting and tracking" },
    { "name": "File Management", "description": "File upload, download, and management" },
    { "name": "Organization", "description": "Department and role management" },
    { "name": "Analytics", "description": "Data analytics and insights" },
    { "name": "Reports", "description": "Reporting and data export" },
    { "name": "System & Settings", "description": "System configuration and user preferences" },
    { "name": "Search", "description": "Search functionality across the system" },
    { "name": "Export", "description": "Data export functionality" },
    { "name": "REAL-TIME", "description": "WebSocket endpoints for real-time communication" }
  ],
  "paths": {
      "/ws/notifications": {
        "get": {
          "tags": ["REAL-TIME"],
          "summary": "WebSocket endpoint for real-time notifications",
          "description": "Connect to receive real-time notifications. Use Socket.IO client to connect and emit 'join-notifications' with userId to join the notifications room.",
          "security": [{ "bearerAuth": [] }],
          "responses": {
            "101": {
              "description": "Switching Protocols - WebSocket connection established",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "type": { "type": "string", "enum": ["websocket"] },
                      "message": { "type": "string", "example": "WebSocket connection established" }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "/ws/chat": {
        "get": {
          "tags": ["REAL-TIME"],
          "summary": "WebSocket endpoint for real-time chat",
          "description": "Connect to receive real-time chat messages. Use Socket.IO client to connect and emit 'join-chat' with conversationId to join the chat room.",
          "security": [{ "bearerAuth": [] }],
          "responses": {
            "101": {
              "description": "Switching Protocols - WebSocket connection established",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "type": { "type": "string", "enum": ["websocket"] },
                      "message": { "type": "string", "example": "WebSocket connection established" }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "/ws/tasks": {
        "get": {
          "tags": ["REAL-TIME"],
          "summary": "WebSocket endpoint for real-time task updates",
          "description": "Connect to receive real-time task updates. Use Socket.IO client to connect and emit 'join-tasks' with userId to join the tasks room.",
          "security": [{ "bearerAuth": [] }],
          "responses": {
            "101": {
              "description": "Switching Protocols - WebSocket connection established",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "type": { "type": "string", "enum": ["websocket"] },
                      "message": { "type": "string", "example": "WebSocket connection established" }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "/ws/analytics": {
        "get": {
          "tags": ["REAL-TIME"],
          "summary": "WebSocket endpoint for real-time analytics",
          "description": "Connect to receive real-time analytics updates. Use Socket.IO client to connect and emit 'join-analytics' with userId to join the analytics room.",
          "security": [{ "bearerAuth": [] }],
          "responses": {
            "101": {
              "description": "Switching Protocols - WebSocket connection established",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "type": { "type": "string", "enum": ["websocket"] },
                      "message": { "type": "string", "example": "WebSocket connection established" }
                    }
                  }
                }
              }
            }
          }
        }
      },
    "/auth/register": {
      "post": {
        "tags": ["Authentication"],
        "summary": "Register a new user",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": { "type": "string" },
                  "email": { "type": "string" },
                  "password": { "type": "string" },
                  "role": { "type": "string", "enum": ["admin", "manager", "employee", "viewer"] },
                  "department": { "type": "string" },
                  "team": { "type": "string" },
                  "position": { "type": "string" },
                  "locale": { "type": "string" }
                },
                "required": ["name", "email", "password", "role"]
              }
            }
          }
        },
        "responses": {
          "201": { "description": "User registered successfully" },
          "400": { "description": "Validation error" },
          "409": { "description": "Email already in use" }
        }
      }
    },
    "/auth/login": {
      "post": {
        "tags": ["Authentication"],
        "summary": "Login and receive JWT token",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "email": { "type": "string" },
                  "password": { "type": "string" }
                },
                "required": ["email", "password"]
              }
            }
          }
        },
        "responses": {
          "200": { "description": "Login successful, returns JWT token" },
          "400": { "description": "Validation error" },
          "401": { "description": "Invalid credentials" }
        }
      }
    },
    "/auth/logout": {
      "post": {
        "tags": ["Authentication"],
        "summary": "Logout user and invalidate token",
        "security": [{ "bearerAuth": [] }],
        "responses": {
          "200": { "description": "Logout successful" },
          "401": { "description": "Unauthorized" }
        }
      }
    },
    "/auth/refresh": {
      "post": {
        "tags": ["Authentication"],
        "summary": "Refresh JWT token",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "refreshToken": { "type": "string" }
                },
                "required": ["refreshToken"]
              }
            }
          }
        },
        "responses": {
          "200": { "description": "Token refreshed successfully" },
          "400": { "description": "Invalid refresh token" },
          "401": { "description": "Unauthorized" }
        }
      }
    },
    "/auth/forgot-password": {
      "post": {
        "tags": ["Authentication"],
        "summary": "Request password reset",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "email": { "type": "string" }
                },
                "required": ["email"]
              }
            }
          }
        },
        "responses": {
          "200": { "description": "Password reset email sent" },
          "400": { "description": "Validation error" },
          "404": { "description": "User not found" }
        }
      }
    },
    "/auth/reset-password": {
      "post": {
        "tags": ["Authentication"],
        "summary": "Reset password with token",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "token": { "type": "string" },
                  "newPassword": { "type": "string" }
                },
                "required": ["token", "newPassword"]
              }
            }
          }
        },
        "responses": {
          "200": { "description": "Password reset successful" },
          "400": { "description": "Validation error" },
          "401": { "description": "Invalid or expired token" }
        }
      }
    },
    "/auth/verify-email": {
      "post": {
        "tags": ["Authentication"],
        "summary": "Verify email address",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "token": { "type": "string" }
                },
                "required": ["token"]
              }
            }
          }
        },
        "responses": {
          "200": { "description": "Email verified successfully" },
          "400": { "description": "Invalid token" },
          "401": { "description": "Token expired" }
        }
      }
    },
    "/auth/google": {
      "get": {
        "tags": ["Authentication"],
        "summary": "Initiate Google OAuth login",
        "responses": {
          "302": { "description": "Redirect to Google OAuth" }
        }
      }
    },
    "/auth/google/callback": {
      "get": {
        "tags": ["Authentication"],
        "summary": "Google OAuth callback",
        "parameters": [
          { "name": "code", "in": "query", "required": true, "schema": { "type": "string" } }
        ],
        "responses": {
          "200": { "description": "OAuth login successful" },
          "400": { "description": "OAuth error" }
        }
      }
    },
    "/auth/google/connect": {
      "post": {
        "tags": ["Authentication"],
        "summary": "Connect existing account to Google",
        "security": [{ "bearerAuth": [] }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "googleToken": { "type": "string" }
                },
                "required": ["googleToken"]
              }
            }
          }
        },
        "responses": {
          "200": { "description": "Google account connected" },
          "400": { "description": "Connection failed" },
          "401": { "description": "Unauthorized" }
        }
      }
    },
    "/auth/change-password": {
      "post": {
        "tags": ["Authentication"],
        "summary": "Change password (authenticated)",
        "security": [{ "bearerAuth": [] }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "currentPassword": { "type": "string" },
                  "newPassword": { "type": "string" }
                },
                "required": ["currentPassword", "newPassword"]
              }
            }
          }
        },
        "responses": {
          "200": { "description": "Password changed successfully" },
          "400": { "description": "Validation error" },
          "401": { "description": "Unauthorized or current password incorrect" }
        }
      }
    },
    "/auth/verify": {
      "get": {
        "tags": ["Authentication"],
        "summary": "Verify JWT token and get user info",
        "security": [{ "bearerAuth": [] }],
        "responses": {
          "200": { "description": "Token verified successfully" },
          "401": { "description": "Invalid token" },
          "404": { "description": "User not found" }
        }
      }
    },
    "/users/profile": {
      "get": {
        "tags": ["Users"],
        "summary": "Get current user profile",
        "security": [{ "bearerAuth": [] }],
        "responses": {
          "200": { "description": "User profile retrieved successfully" },
          "401": { "description": "Unauthorized" }
        }
      },
      "put": {
        "tags": ["Users"],
        "summary": "Update current user profile",
        "security": [{ "bearerAuth": [] }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            }
          }
        },
        "responses": {
          "200": { "description": "Profile updated successfully" },
          "400": { "description": "Validation error" },
          "401": { "description": "Unauthorized" }
        }
      }
    },
    "/users/{id}": {
      "get": {
        "tags": ["Users"],
        "summary": "Get user by ID",
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          { "name": "id", "in": "path", "required": true, "schema": { "type": "string" } }
        ],
        "responses": {
          "200": { "description": "User retrieved successfully" },
          "404": { "description": "User not found" },
          "401": { "description": "Unauthorized" }
        }
      },
      "put": {
        "tags": ["Users"],
        "summary": "Update user by ID",
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          { "name": "id", "in": "path", "required": true, "schema": { "type": "string" } }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            }
          }
        },
        "responses": {
          "200": { "description": "User updated successfully" },
          "400": { "description": "Validation error" },
          "404": { "description": "User not found" },
          "401": { "description": "Unauthorized" }
        }
      },
      "delete": {
        "tags": ["Users"],
        "summary": "Delete user by ID",
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          { "name": "id", "in": "path", "required": true, "schema": { "type": "string" } }
        ],
        "responses": {
          "200": { "description": "User deleted successfully" },
          "404": { "description": "User not found" },
          "401": { "description": "Unauthorized" }
        }
      }
    },
    "/tasks": {
      "get": {
        "tags": ["Tasks"],
        "summary": "Get all tasks with filtering, pagination, and sorting",
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          { "name": "status", "in": "query", "schema": { "type": "string", "enum": ["pending", "in_progress", "completed", "cancelled"] } },
          { "name": "priority", "in": "query", "schema": { "type": "string", "enum": ["low", "medium", "high", "urgent"] } },
          { "name": "assignedTo", "in": "query", "schema": { "type": "string" } },
          { "name": "project", "in": "query", "schema": { "type": "string" } },
          { "name": "team", "in": "query", "schema": { "type": "string" } },
          { "name": "search", "in": "query", "schema": { "type": "string" } },
          { "name": "page", "in": "query", "schema": { "type": "integer", "default": 1 } },
          { "name": "limit", "in": "query", "schema": { "type": "integer", "default": 10 } },
          { "name": "sortBy", "in": "query", "schema": { "type": "string", "default": "createdAt" } },
          { "name": "sortOrder", "in": "query", "schema": { "type": "string", "enum": ["asc", "desc"], "default": "desc" } }
        ],
        "responses": {
          "200": { "description": "List of tasks retrieved successfully" },
          "401": { "description": "Unauthorized" }
        }
      },
      "post": {
        "tags": ["Tasks"],
        "summary": "Create a new task",
        "security": [{ "bearerAuth": [] }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Task"
              }
            }
          }
        },
        "responses": {
          "201": { "description": "Task created successfully" },
          "400": { "description": "Validation error" },
          "401": { "description": "Unauthorized" }
        }
      }
    },
    "/tasks/{id}": {
      "get": {
        "tags": ["Tasks"],
        "summary": "Get task by ID with detailed information",
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          { "name": "id", "in": "path", "required": true, "schema": { "type": "string" } }
        ],
        "responses": {
          "200": { "description": "Task retrieved successfully" },
          "404": { "description": "Task not found" },
          "401": { "description": "Unauthorized" }
        }
      },
      "put": {
        "tags": ["Tasks"],
        "summary": "Update task by ID",
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          { "name": "id", "in": "path", "required": true, "schema": { "type": "string" } }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Task"
              }
            }
          }
        },
        "responses": {
          "200": { "description": "Task updated successfully" },
          "400": { "description": "Validation error" },
          "404": { "description": "Task not found" },
          "401": { "description": "Unauthorized" }
        }
      },
      "delete": {
        "tags": ["Tasks"],
        "summary": "Delete task by ID",
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          { "name": "id", "in": "path", "required": true, "schema": { "type": "string" } }
        ],
        "responses": {
          "200": { "description": "Task deleted successfully" },
          "404": { "description": "Task not found" },
          "401": { "description": "Unauthorized" }
        }
      }
    },
    "/tasks/{id}/status": {
      "patch": {
        "tags": ["Tasks"],
        "summary": "Update task status",
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          { "name": "id", "in": "path", "required": true, "schema": { "type": "string" } }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "status": { "type": "string", "enum": ["pending", "in_progress", "completed", "cancelled"] },
                  "notes": { "type": "string" }
                },
                "required": ["status"]
              }
            }
          }
        },
        "responses": {
          "200": { "description": "Task status updated successfully" },
          "400": { "description": "Validation error" },
          "404": { "description": "Task not found" },
          "401": { "description": "Unauthorized" }
        }
      }
    },
    "/tasks/{id}/progress": {
      "patch": {
        "tags": ["Tasks"],
        "summary": "Update task progress with notes",
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          { "name": "id", "in": "path", "required": true, "schema": { "type": "string" } }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "progress": { "type": "number", "minimum": 0, "maximum": 100, "description": "Task progress percentage" },
                  "notes": { "type": "string", "description": "Optional notes about the progress update" }
                },
                "required": ["progress"]
              }
            }
          }
        },
        "responses": {
          "200": { 
            "description": "Task progress updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Task"
                }
              }
            }
          },
          "400": { "description": "Validation error" },
          "404": { "description": "Task not found" },
          "401": { "description": "Unauthorized" },
          "403": { "description": "Access denied" },
          "500": { "description": "Internal server error" }
        }
      }
    },
    "/tasks/{id}/complete": {
      "post": {
        "tags": ["Tasks"],
        "summary": "Mark task as completed",
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          { "name": "id", "in": "path", "required": true, "schema": { "type": "string" } }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "actualHours": { "type": "number" },
                  "quality": { "type": "number", "minimum": 1, "maximum": 5 },
                  "notes": { "type": "string" }
                }
              }
            }
          }
        },
        "responses": {
          "200": { "description": "Task completed successfully" },
          "400": { "description": "Validation error" },
          "404": { "description": "Task not found" },
          "401": { "description": "Unauthorized" }
        }
      }
    },
    "/tasks/{id}/notes": {
      "post": {
        "tags": ["Tasks"],
        "summary": "Add notes/comments to task",
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          { "name": "id", "in": "path", "required": true, "schema": { "type": "string" } }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "text": { "type": "string" },
                  "type": { "type": "string", "enum": ["comment", "note", "update"] }
                },
                "required": ["text"]
              }
            }
          }
        },
        "responses": {
          "200": { "description": "Note added successfully" },
          "400": { "description": "Validation error" },
          "404": { "description": "Task not found" },
          "401": { "description": "Unauthorized" }
        }
      }
    },
    "/tasks/{id}/files": {
      "post": {
        "tags": ["Tasks"],
        "summary": "Add file attachments to task",
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          { "name": "id", "in": "path", "required": true, "schema": { "type": "string" } }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "files": { "type": "array", "items": { "type": "string", "format": "binary" } },
                  "description": { "type": "string" }
                },
                "required": ["files"]
              }
            }
          }
        },
        "responses": {
          "200": { "description": "Files attached successfully" },
          "400": { "description": "Validation error" },
          "404": { "description": "Task not found" },
          "401": { "description": "Unauthorized" }
        }
      }
    },
    "/tasks/{id}/blockers": {
      "patch": {
        "tags": ["Tasks"],
        "summary": "Add or resolve blockers for a task",
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          { "name": "id", "in": "path", "required": true, "schema": { "type": "string" } }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "action": { "type": "string", "enum": ["add", "resolve"], "description": "Action to perform on blockers" },
                  "blockerId": { "type": "string", "description": "Blocker ID (required for resolve action)" },
                  "description": { "type": "string", "description": "Blocker description (required for add action)" },
                  "resolved": { "type": "boolean", "description": "Whether blocker is resolved (for resolve action)" }
                },
                "required": ["action"]
              }
            }
          }
        },
        "responses": {
          "200": { 
            "description": "Task blockers updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Task"
                }
              }
            }
          },
          "400": { "description": "Validation error" },
          "404": { "description": "Task not found" },
          "401": { "description": "Unauthorized" },
          "403": { "description": "Access denied" },
          "500": { "description": "Internal server error" }
        }
      }
    },
    "/tasks/{id}/history": {
      "get": {
        "tags": ["Tasks"],
        "summary": "Get task history and activity log",
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          { "name": "id", "in": "path", "required": true, "schema": { "type": "string" } }
        ],
        "responses": {
          "200": { "description": "Task history retrieved successfully" },
          "404": { "description": "Task not found" },
          "401": { "description": "Unauthorized" }
        }
      }
    },
    "/tasks/{id}/complete": {
      "patch": {
        "tags": ["Tasks"],
        "summary": "Update task completion with progress, notes, blockers, and files",
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          { "name": "id", "in": "path", "required": true, "schema": { "type": "string" } }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "progress": { "type": "number", "minimum": 0, "maximum": 100, "description": "Task progress percentage" },
                  "notes": { "type": "string", "description": "Completion notes or comments" },
                  "blockers": { "type": "array", "items": { "type": "string" }, "description": "Array of blocker descriptions" },
                  "files": { 
                    "type": "array", 
                    "items": { 
                      "type": "object",
                      "properties": {
                        "url": { "type": "string" },
                        "filename": { "type": "string" },
                        "fileType": { "type": "string" },
                        "fileSize": { "type": "number" }
                      }
                    },
                    "description": "Array of file attachments"
                  },
                  "status": { "type": "string", "enum": ["pending", "in_progress", "completed", "overdue", "blocked", "cancelled"], "description": "New task status" }
                }
              }
            }
          }
        },
        "responses": {
          "200": { 
            "description": "Task completion updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Task"
                }
              }
            }
          },
          "400": { "description": "Validation error" },
          "404": { "description": "Task not found" },
          "401": { "description": "Unauthorized" },
          "403": { "description": "Access denied" },
          "500": { "description": "Internal server error" }
        }
      }
    },
    "/tasks/{id}/comment": {
      "post": {
        "tags": ["Tasks"],
        "summary": "Add a comment to a task",
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          { "name": "id", "in": "path", "required": true, "schema": { "type": "string" } }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "text": { "type": "string" }
                },
                "required": ["text"]
              }
            }
          }
        },
        "responses": {
          "200": { "description": "Comment added." },
          "404": { "description": "Task not found." },
          "401": { "description": "Unauthorized." }
        }
      }
    },
    "/kpis": {
      "get": {
        "tags": ["KPIs"],
        "summary": "Get all KPIs (employer) or own KPIs (employee)",
        "security": [{ "bearerAuth": [] }],
        "responses": {
          "200": { "description": "List of KPIs." },
          "401": { "description": "Unauthorized." }
        }
      },
      "post": {
        "tags": ["KPIs"],
        "summary": "Create a new KPI (employer only)",
        "security": [{ "bearerAuth": [] }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": { "type": "string" },
                  "description": { "type": "string" },
                  "targetValue": { "type": "number" },
                  "assignedTo": { "type": "string" },
                  "period": { "type": "string", "enum": ["weekly", "monthly", "quarterly", "yearly"] }
                },
                "required": ["name", "targetValue", "assignedTo"]
              }
            }
          }
        },
        "responses": {
          "201": { "description": "KPI created." },
          "400": { "description": "Validation error." },
          "401": { "description": "Unauthorized." }
        }
      }
    },
    "/kpis/{id}/progress": {
      "patch": {
        "tags": ["KPIs"],
        "summary": "Update KPI progress (employee only)",
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          { "name": "id", "in": "path", "required": true, "schema": { "type": "string" } }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "currentValue": { "type": "number" }
                },
                "required": ["currentValue"]
              }
            }
          }
        },
        "responses": {
          "200": { "description": "KPI progress updated." },
          "404": { "description": "KPI not found." },
          "401": { "description": "Unauthorized." }
        }
      }
    },
    "/dashboard": {
      "get": {
        "tags": ["Dashboard"],
        "summary": "Get user dashboard data with tasks and statistics",
        "security": [{ "bearerAuth": [] }],
        "responses": {
          "200": { 
            "description": "User dashboard data retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DashboardData"
                }
              }
            }
          },
          "401": { "description": "Unauthorized" },
          "500": { "description": "Internal server error" }
        }
      }
    },
    "/dashboard/stats": {
      "get": {
        "tags": ["Dashboard"],
        "summary": "Get dashboard statistics (employer only)",
        "security": [{ "bearerAuth": [] }],
        "responses": {
          "200": { "description": "Dashboard stats." },
          "401": { "description": "Unauthorized." }
        }
      }
    },
    "/chat/conversations": {
      "get": {
        "tags": ["Chat"],
        "summary": "Get all conversations for the authenticated user",
        "security": [{ "bearerAuth": [] }],
        "responses": {
          "200": { "description": "List of conversations retrieved successfully" },
          "401": { "description": "Unauthorized" },
          "500": { "description": "Internal server error" }
        }
      },
      "post": {
        "tags": ["Chat"],
        "summary": "Create new conversation",
        "security": [{ "bearerAuth": [] }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": { "type": "string", "description": "Conversation name" },
                  "type": { "type": "string", "enum": ["direct", "group", "team", "project"], "description": "Conversation type" },
                  "participants": { "type": "array", "items": { "type": "string" }, "description": "Array of user IDs" },
                  "projectId": { "type": "string", "description": "Project ID for project conversations" },
                  "teamId": { "type": "string", "description": "Team ID for team conversations" },
                  "taskId": { "type": "string", "description": "Task ID for task conversations" }
                },
                "required": ["type", "participants"]
              }
            }
          }
        },
        "responses": {
          "201": { "description": "Conversation created successfully" },
          "400": { "description": "Validation error" },
          "401": { "description": "Unauthorized" },
          "500": { "description": "Internal server error" }
        }
      }
    },
    "/chat/conversations/{id}": {
      "get": {
        "tags": ["Chat"],
        "summary": "Get conversation by ID",
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          { "name": "id", "in": "path", "required": true, "schema": { "type": "string" } }
        ],
        "responses": {
          "200": { "description": "Conversation retrieved successfully" },
          "403": { "description": "Access denied" },
          "404": { "description": "Conversation not found" },
          "500": { "description": "Internal server error" }
        }
      }
    },
    "/chat/conversations/{id}": {
      "delete": {
        "tags": ["Chat"],
        "summary": "Delete conversation",
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          { "name": "id", "in": "path", "required": true, "schema": { "type": "string" } }
        ],
        "responses": {
          "200": { "description": "Conversation deleted successfully" },
          "403": { "description": "Access denied" },
          "404": { "description": "Conversation not found" },
          "500": { "description": "Internal server error" }
        }
      }
    },
    "/chat/messages/{convId}": {
      "get": {
        "tags": ["Chat"],
        "summary": "Get messages by conversation ID",
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          { "name": "convId", "in": "path", "required": true, "schema": { "type": "string" } },
          { "name": "page", "in": "query", "schema": { "type": "integer", "default": 1 } },
          { "name": "limit", "in": "query", "schema": { "type": "integer", "default": 50 } }
        ],
        "responses": {
          "200": { "description": "Messages retrieved successfully" },
          "403": { "description": "Access denied" },
          "404": { "description": "Conversation not found" },
          "500": { "description": "Internal server error" }
        }
      }
    },
    "/chat/messages": {
      "post": {
        "tags": ["Chat"],
        "summary": "Send message to conversation",
        "security": [{ "bearerAuth": [] }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "conversationId": { "type": "string", "description": "Conversation ID" },
                  "message": { "type": "string", "description": "Message content" },
                  "replyTo": { "type": "string", "description": "Message ID to reply to" },
                  "mentions": { "type": "array", "items": { "type": "string" }, "description": "Array of user IDs to mention" }
                },
                "required": ["conversationId", "message"]
              }
            }
          }
        },
        "responses": {
          "201": { "description": "Message sent successfully" },
          "400": { "description": "Validation error" },
          "401": { "description": "Unauthorized" },
          "403": { "description": "Access denied" },
          "500": { "description": "Internal server error" }
        }
      }
    },
    "/chat/messages/{id}": {
      "put": {
        "tags": ["Chat"],
        "summary": "Edit message",
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          { "name": "id", "in": "path", "required": true, "schema": { "type": "string" } }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "message": { "type": "string", "description": "New message content" }
                },
                "required": ["message"]
              }
            }
          }
        },
        "responses": {
          "200": { "description": "Message updated successfully" },
          "400": { "description": "Validation error" },
          "401": { "description": "Unauthorized" },
          "403": { "description": "Access denied" },
          "404": { "description": "Message not found" },
          "500": { "description": "Internal server error" }
        }
      },
      "delete": {
        "tags": ["Chat"],
        "summary": "Delete message",
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          { "name": "id", "in": "path", "required": true, "schema": { "type": "string" } }
        ],
        "responses": {
          "200": { "description": "Message deleted successfully" },
          "401": { "description": "Unauthorized" },
          "403": { "description": "Access denied" },
          "404": { "description": "Message not found" },
          "500": { "description": "Internal server error" }
        }
      }
    },
    "/chat/messages/{id}/react": {
      "post": {
        "tags": ["Chat"],
        "summary": "React to message",
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          { "name": "id", "in": "path", "required": true, "schema": { "type": "string" } }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "emoji": { "type": "string", "description": "Emoji reaction" }
                },
                "required": ["emoji"]
              }
            }
          }
        },
        "responses": {
          "200": { "description": "Reaction added/removed successfully" },
          "400": { "description": "Validation error" },
          "401": { "description": "Unauthorized" },
          "403": { "description": "Reactions not allowed" },
          "404": { "description": "Message not found" },
          "500": { "description": "Internal server error" }
        }
      }
    },
    "/chat/upload": {
      "post": {
        "tags": ["Chat"],
        "summary": "Upload file to chat",
        "security": [{ "bearerAuth": [] }],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "file": { "type": "string", "format": "binary", "description": "File to upload" },
                  "conversationId": { "type": "string", "description": "Conversation ID" },
                  "description": { "type": "string", "description": "File description" }
                },
                "required": ["file", "conversationId"]
              }
            }
          }
        },
        "responses": {
          "201": { "description": "File uploaded successfully" },
          "400": { "description": "Validation error" },
          "401": { "description": "Unauthorized" },
          "403": { "description": "Access denied or file uploads not allowed" },
          "500": { "description": "Internal server error" }
        }
      }
    },
    "/chat/files/{convId}": {
      "get": {
        "tags": ["Chat"],
        "summary": "Get chat files for a conversation",
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          { "name": "convId", "in": "path", "required": true, "schema": { "type": "string" } },
          { "name": "page", "in": "query", "schema": { "type": "integer", "default": 1 } },
          { "name": "limit", "in": "query", "schema": { "type": "integer", "default": 20 } }
        ],
        "responses": {
          "200": { "description": "Chat files retrieved successfully" },
          "403": { "description": "Access denied" },
          "404": { "description": "Conversation not found" },
          "500": { "description": "Internal server error" }
        }
      }
    },
    "/chat/files/{id}": {
      "delete": {
        "tags": ["Chat"],
        "summary": "Delete chat file",
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          { "name": "id", "in": "path", "required": true, "schema": { "type": "string" } }
        ],
        "responses": {
          "200": { "description": "Chat file deleted successfully" },
          "401": { "description": "Unauthorized" },
          "403": { "description": "Access denied" },
          "404": { "description": "File not found" },
          "500": { "description": "Internal server error" }
        }
      }
    },
    "/chat/{taskId}": {
      "get": {
        "tags": ["Chat"],
        "summary": "Get all chat messages for a task",
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          { "name": "taskId", "in": "path", "required": true, "schema": { "type": "string" } }
        ],
        "responses": {
          "200": { "description": "List of chat messages." },
          "401": { "description": "Unauthorized." }
        }
      },
      "post": {
        "tags": ["Chat"],
        "summary": "Send a chat message within a task",
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          { "name": "taskId", "in": "path", "required": true, "schema": { "type": "string" } }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "message": { "type": "string" }
                },
                "required": ["message"]
              }
            }
          }
        },
        "responses": {
          "201": { "description": "Message sent." },
          "400": { "description": "Validation error." },
          "401": { "description": "Unauthorized." }
        }
      }
    },
    "/notifications": {
      "get": {
        "tags": ["Notifications"],
        "summary": "Get notifications for the current user with pagination and filtering",
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          { "name": "page", "in": "query", "schema": { "type": "integer", "default": 1 }, "description": "Page number" },
          { "name": "limit", "in": "query", "schema": { "type": "integer", "default": 20 }, "description": "Items per page" },
          { "name": "type", "in": "query", "schema": { "type": "string", "enum": ["task", "message", "reminder", "achievement", "system", "team", "kpi"] }, "description": "Filter by notification type" },
          { "name": "priority", "in": "query", "schema": { "type": "string", "enum": ["low", "medium", "high", "urgent"] }, "description": "Filter by priority" },
          { "name": "read", "in": "query", "schema": { "type": "boolean" }, "description": "Filter by read status" },
          { "name": "category", "in": "query", "schema": { "type": "string" }, "description": "Filter by category" }
        ],
        "responses": {
          "200": { 
            "description": "List of notifications retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "notifications": { "type": "array", "items": { "$ref": "#/components/schemas/Notification" } },
                    "pagination": {
                      "type": "object",
                      "properties": {
                        "page": { "type": "integer" },
                        "limit": { "type": "integer" },
                        "total": { "type": "integer" },
                        "pages": { "type": "integer" }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": { "description": "Unauthorized" },
          "500": { "description": "Internal server error" }
        }
      }
    },
    "/notifications/{id}": {
      "get": {
        "tags": ["Notifications"],
        "summary": "Get specific notification by ID",
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          { "name": "id", "in": "path", "required": true, "schema": { "type": "string" }, "description": "Notification ID" }
        ],
        "responses": {
          "200": { 
            "description": "Notification retrieved successfully",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Notification" }
              }
            }
          },
          "404": { "description": "Notification not found" },
          "401": { "description": "Unauthorized" },
          "500": { "description": "Internal server error" }
        }
      },
      "patch": {
        "tags": ["Notifications"],
        "summary": "Update notification",
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          { "name": "id", "in": "path", "required": true, "schema": { "type": "string" }, "description": "Notification ID" }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "title": { "type": "string", "description": "Notification title" },
                  "message": { "type": "string", "description": "Notification message" },
                  "priority": { "type": "string", "enum": ["low", "medium", "high", "urgent"], "description": "Notification priority" },
                  "category": { "type": "string", "description": "Notification category" },
                  "actionUrl": { "type": "string", "description": "Action URL for the notification" },
                  "expiresAt": { "type": "string", "format": "date-time", "description": "Expiration date" }
                }
              }
            }
          }
        },
        "responses": {
          "200": { 
            "description": "Notification updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": { "type": "string" },
                    "notification": { "$ref": "#/components/schemas/Notification" }
                  }
                }
              }
            }
          },
          "404": { "description": "Notification not found" },
          "401": { "description": "Unauthorized" },
          "500": { "description": "Internal server error" }
        }
      },
      "delete": {
        "tags": ["Notifications"],
        "summary": "Delete notification",
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          { "name": "id", "in": "path", "required": true, "schema": { "type": "string" }, "description": "Notification ID" }
        ],
        "responses": {
          "200": { "description": "Notification deleted successfully" },
          "404": { "description": "Notification not found" },
          "401": { "description": "Unauthorized" },
          "500": { "description": "Internal server error" }
        }
      }
    },
    "/notifications/{id}/read": {
      "patch": {
        "tags": ["Notifications"],
        "summary": "Mark notification as read",
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          { "name": "id", "in": "path", "required": true, "schema": { "type": "string" }, "description": "Notification ID" }
        ],
        "responses": {
          "200": { 
            "description": "Notification marked as read",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": { "type": "string" },
                    "notification": { "$ref": "#/components/schemas/Notification" }
                  }
                }
              }
            }
          },
          "404": { "description": "Notification not found" },
          "401": { "description": "Unauthorized" },
          "500": { "description": "Internal server error" }
        }
      }
    },
    "/notifications/bulk-read": {
      "post": {
        "tags": ["Notifications"],
        "summary": "Mark multiple notifications as read",
        "security": [{ "bearerAuth": [] }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "notificationIds": { 
                    "type": "array", 
                    "items": { "type": "string" },
                    "description": "Array of notification IDs to mark as read"
                  }
                },
                "required": ["notificationIds"]
              }
            }
          }
        },
        "responses": {
          "200": { 
            "description": "Notifications marked as read successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": { "type": "string" },
                    "modifiedCount": { "type": "integer" }
                  }
                }
              }
            }
          },
          "400": { "description": "Validation error" },
          "401": { "description": "Unauthorized" },
          "500": { "description": "Internal server error" }
        }
      }
    },
    "/notifications/bulk-delete": {
      "delete": {
        "tags": ["Notifications"],
        "summary": "Delete multiple notifications",
        "security": [{ "bearerAuth": [] }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "notificationIds": { 
                    "type": "array", 
                    "items": { "type": "string" },
                    "description": "Array of notification IDs to delete"
                  }
                },
                "required": ["notificationIds"]
              }
            }
          }
        },
        "responses": {
          "200": { 
            "description": "Notifications deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": { "type": "string" },
                    "deletedCount": { "type": "integer" }
                  }
                }
              }
            }
          },
          "400": { "description": "Validation error" },
          "401": { "description": "Unauthorized" },
          "500": { "description": "Internal server error" }
        }
      }
    },
    "/notifications/unread-count": {
      "get": {
        "tags": ["Notifications"],
        "summary": "Get count of unread notifications",
        "security": [{ "bearerAuth": [] }],
        "responses": {
          "200": { 
            "description": "Unread count retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "unreadCount": { "type": "integer" },
                    "message": { "type": "string" }
                  }
                }
              }
            }
          },
          "401": { "description": "Unauthorized" },
          "500": { "description": "Internal server error" }
        }
      }
    },
    "/notifications/settings": {
      "patch": {
        "tags": ["Notifications"],
        "summary": "Update notification preferences/settings",
        "security": [{ "bearerAuth": [] }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "emailNotifications": { "type": "boolean", "description": "Enable/disable email notifications" },
                  "pushNotifications": { "type": "boolean", "description": "Enable/disable push notifications" },
                  "inAppNotifications": { "type": "boolean", "description": "Enable/disable in-app notifications" },
                  "notificationTypes": {
                    "type": "object",
                    "properties": {
                      "task": { "type": "boolean" },
                      "message": { "type": "boolean" },
                      "reminder": { "type": "boolean" },
                      "achievement": { "type": "boolean" },
                      "system": { "type": "boolean" },
                      "team": { "type": "boolean" },
                      "kpi": { "type": "boolean" }
                    }
                  },
                  "quietHours": {
                    "type": "object",
                    "properties": {
                      "enabled": { "type": "boolean" },
                      "startTime": { "type": "string" },
                      "endTime": { "type": "string" },
                      "timezone": { "type": "string" }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": { 
            "description": "Notification settings updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": { "type": "string" },
                    "settings": {
                      "type": "object",
                      "properties": {
                        "emailNotifications": { "type": "boolean" },
                        "pushNotifications": { "type": "boolean" },
                        "inAppNotifications": { "type": "boolean" },
                        "notificationTypes": { "type": "object" },
                        "quietHours": { "type": "object" }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": { "description": "Unauthorized" },
          "500": { "description": "Internal server error" }
        }
      }
    },
    "/notifications/send": {
      "post": {
        "tags": ["Notifications"],
        "summary": "Send notification (admin/system only)",
        "security": [{ "bearerAuth": [] }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "userId": { "type": "string", "description": "User ID to send notification to" },
                  "type": { "type": "string", "enum": ["task", "message", "reminder", "achievement", "system", "team", "kpi"], "description": "Notification type" },
                  "title": { "type": "string", "description": "Notification title" },
                  "message": { "type": "string", "description": "Notification message" },
                  "priority": { "type": "string", "enum": ["low", "medium", "high", "urgent"], "description": "Notification priority" },
                  "category": { "type": "string", "description": "Notification category" },
                  "relatedEntity": {
                    "type": "object",
                    "properties": {
                      "type": { "type": "string", "enum": ["task", "user", "team", "kpi", "goal"] },
                      "id": { "type": "string" }
                    }
                  },
                  "actionUrl": { "type": "string", "description": "Action URL for the notification" },
                  "expiresAt": { "type": "string", "format": "date-time", "description": "Expiration date" },
                  "deliveryMethod": { "type": "string", "enum": ["in_app", "email", "push", "sms"], "description": "Delivery method" }
                },
                "required": ["userId", "type", "title", "message"]
              }
            }
          }
        },
        "responses": {
          "201": { 
            "description": "Notification sent successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": { "type": "string" },
                    "notification": { "$ref": "#/components/schemas/Notification" }
                  }
                }
              }
            }
          },
          "400": { "description": "Validation error" },
          "401": { "description": "Unauthorized" },
          "403": { "description": "Forbidden - Admin access required" },
          "500": { "description": "Internal server error" }
        }
      }
    },
    "/files": {
      "get": {
        "tags": ["File Management"],
        "summary": "Get user's files with pagination and filtering",
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          { "name": "page", "in": "query", "schema": { "type": "integer", "default": 1 }, "description": "Page number" },
          { "name": "limit", "in": "query", "schema": { "type": "integer", "default": 20 }, "description": "Items per page" },
          { "name": "category", "in": "query", "schema": { "type": "string", "enum": ["document", "image", "video", "audio", "archive", "other"] }, "description": "Filter by file category" },
          { "name": "tags", "in": "query", "schema": { "type": "string" }, "description": "Comma-separated tags to filter by" },
          { "name": "isPublic", "in": "query", "schema": { "type": "boolean" }, "description": "Filter by public status" },
          { "name": "sortBy", "in": "query", "schema": { "type": "string", "default": "createdAt" }, "description": "Sort field" },
          { "name": "sortOrder", "in": "query", "schema": { "type": "string", "enum": ["asc", "desc"], "default": "desc" }, "description": "Sort order" }
        ],
        "responses": {
          "200": {
            "description": "Files retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": { "type": "string" },
                    "files": { "type": "array", "items": { "$ref": "#/components/schemas/File" } },
                    "pagination": {
                      "type": "object",
                      "properties": {
                        "page": { "type": "integer" },
                        "limit": { "type": "integer" },
                        "total": { "type": "integer" },
                        "pages": { "type": "integer" }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": { "description": "Unauthorized" },
          "500": { "description": "Internal server error" }
        }
      }
    },
    "/files/upload": {
      "post": {
        "tags": ["File Management"],
        "summary": "Upload a new file",
        "security": [{ "bearerAuth": [] }],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "file": { "type": "string", "format": "binary", "description": "File to upload" },
                  "description": { "type": "string", "description": "File description" },
                  "tags": { "type": "string", "description": "Comma-separated tags" },
                  "category": { "type": "string", "enum": ["document", "image", "video", "audio", "archive", "other"], "description": "File category" },
                  "isPublic": { "type": "string", "description": "Whether file is public" },
                  "task": { "type": "string", "description": "Associated task ID" },
                  "project": { "type": "string", "description": "Associated project ID" },
                  "team": { "type": "string", "description": "Associated team ID" },
                  "department": { "type": "string", "description": "Associated department ID" }
                },
                "required": ["file"]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "File uploaded successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": { "type": "string" },
                    "file": { "$ref": "#/components/schemas/File" }
                  }
                }
              }
            }
          },
          "400": { "description": "Validation error or unsupported file type" },
          "401": { "description": "Unauthorized" },
          "500": { "description": "Internal server error" }
        }
      }
    },
    "/files/{id}": {
      "get": {
        "tags": ["File Management"],
        "summary": "Get file by ID",
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          { "name": "id", "in": "path", "required": true, "schema": { "type": "string" }, "description": "File ID" }
        ],
        "responses": {
          "200": {
            "description": "File retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": { "type": "string" },
                    "file": { "$ref": "#/components/schemas/File" }
                  }
                }
              }
            }
          },
          "403": { "description": "Access denied" },
          "404": { "description": "File not found" },
          "401": { "description": "Unauthorized" },
          "500": { "description": "Internal server error" }
        }
      },
      "delete": {
        "tags": ["File Management"],
        "summary": "Delete file",
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          { "name": "id", "in": "path", "required": true, "schema": { "type": "string" }, "description": "File ID" }
        ],
        "responses": {
          "200": {
            "description": "File deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": { "type": "string" },
                    "fileId": { "type": "string" }
                  }
                }
              }
            }
          },
          "403": { "description": "Access denied" },
          "404": { "description": "File not found" },
          "401": { "description": "Unauthorized" },
          "500": { "description": "Internal server error" }
        }
      }
    },
    "/files/download/{id}": {
      "get": {
        "tags": ["File Management"],
        "summary": "Download file by ID",
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          { "name": "id", "in": "path", "required": true, "schema": { "type": "string" }, "description": "File ID" }
        ],
        "responses": {
          "200": {
            "description": "File download successful",
            "content": {
              "application/octet-stream": {
                "schema": { "type": "string", "format": "binary" }
              }
            }
          },
          "403": { "description": "Access denied" },
          "404": { "description": "File not found" },
          "401": { "description": "Unauthorized" },
          "500": { "description": "Internal server error" }
          }
        }
      },
    "/files/share": {
      "post": {
        "tags": ["File Management"],
        "summary": "Share file with another user",
        "security": [{ "bearerAuth": [] }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "fileId": { "type": "string", "description": "File ID to share" },
                  "shareWith": { "type": "string", "description": "User ID to share with" },
                  "permissions": { "type": "array", "items": { "type": "string", "enum": ["view", "edit", "admin"] }, "description": "Permissions to grant" },
                  "expiryDate": { "type": "string", "format": "date-time", "description": "Expiration date for sharing" }
                },
                "required": ["fileId", "shareWith"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "File shared successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": { "type": "string" },
                    "shareInfo": {
                      "type": "object",
                      "properties": {
                        "fileId": { "type": "string" },
                        "shareWith": { "type": "string" },
                        "permissions": { "type": "array", "items": { "type": "string" } },
                        "expiryDate": { "type": "string", "format": "date-time" },
                        "sharedBy": { "type": "string" },
                        "sharedAt": { "type": "string", "format": "date-time" },
                        "status": { "type": "string" }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": { "description": "Validation error" },
          "403": { "description": "Access denied" },
          "404": { "description": "File not found" },
          "401": { "description": "Unauthorized" },
          "500": { "description": "Internal server error" }
        }
      }
    },
    "/ai/assign-tasks": {
      "post": {
        "tags": ["AI Features"],
        "summary": "AI-powered task assignment",
        "security": [{ "bearerAuth": [] }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "tasks": { "type": "array", "items": { "type": "string" } },
                  "criteria": { "type": "object" }
                },
                "required": ["tasks"]
              }
            }
          }
        },
        "responses": {
          "200": { "description": "Tasks assigned successfully" },
          "400": { "description": "Validation error" },
          "401": { "description": "Unauthorized" }
        }
      }
    },
    "/ai/optimize-schedule": {
      "post": {
        "tags": ["AI Features"],
        "summary": "AI-powered schedule optimization",
        "security": [{ "bearerAuth": [] }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "userId": { "type": "string" },
                  "dateRange": { "type": "object" }
                },
                "required": ["userId"]
              }
            }
          }
        },
        "responses": {
          "200": { "description": "Schedule optimized successfully" },
          "400": { "description": "Validation error" },
          "401": { "description": "Unauthorized" }
        }
      }
    },
    "/ai/suggestions": {
      "get": {
        "tags": ["AI Features"],
        "summary": "Get AI suggestions for user",
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          { "name": "type", "in": "query", "schema": { "type": "string", "enum": ["task", "schedule", "productivity"] } }
        ],
        "responses": {
          "200": { "description": "AI suggestions retrieved successfully" },
          "401": { "description": "Unauthorized" }
        }
      }
    },
    "/ai/analyze-performance": {
      "post": {
        "tags": ["AI Features"],
        "summary": "AI-powered performance analysis",
        "security": [{ "bearerAuth": [] }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "userId": { "type": "string" },
                  "timeframe": { "type": "string" }
                },
                "required": ["userId"]
              }
            }
          }
        },
        "responses": {
          "200": { "description": "Performance analysis completed" },
          "400": { "description": "Validation error" },
          "401": { "description": "Unauthorized" }
        }
      }
    },
    "/team/members": {
      "get": {
        "tags": ["Team Management"],
        "summary": "Get team members with filtering",
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          { "name": "teamId", "in": "query", "schema": { "type": "string" } },
          { "name": "departmentId", "in": "query", "schema": { "type": "string" } },
          { "name": "role", "in": "query", "schema": { "type": "string" } },
          { "name": "status", "in": "query", "schema": { "type": "string" } }
        ],
        "responses": {
          "200": { "description": "Team members retrieved successfully" },
          "401": { "description": "Unauthorized" }
        }
      },
      "post": {
        "tags": ["Team Management"],
        "summary": "Add user to team",
        "security": [{ "bearerAuth": [] }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "userId": { "type": "string" },
                  "teamId": { "type": "string" },
                  "role": { "type": "string" },
                  "position": { "type": "string" }
                },
                "required": ["userId", "teamId"]
              }
            }
          }
        },
        "responses": {
          "201": { "description": "User added to team successfully" },
          "400": { "description": "Validation error" },
          "401": { "description": "Unauthorized" }
        }
      }
    },
    "/team/members/{id}": {
      "get": {
        "tags": ["Team Management"],
        "summary": "Get team member details",
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          { "name": "id", "in": "path", "required": true, "schema": { "type": "string" } }
        ],
        "responses": {
          "200": { "description": "Team member details retrieved successfully" },
          "404": { "description": "Member not found" },
          "401": { "description": "Unauthorized" }
        }
      },
      "put": {
        "tags": ["Team Management"],
        "summary": "Update team member",
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          { "name": "id", "in": "path", "required": true, "schema": { "type": "string" } }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "role": { "type": "string" },
                  "position": { "type": "string" },
                  "status": { "type": "string" }
                }
              }
            }
          }
        },
        "responses": {
          "200": { "description": "Team member updated successfully" },
          "400": { "description": "Validation error" },
          "404": { "description": "Member not found" },
          "401": { "description": "Unauthorized" }
        }
      },
      "delete": {
        "tags": ["Team Management"],
        "summary": "Remove user from team",
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          { "name": "id", "in": "path", "required": true, "schema": { "type": "string" } }
        ],
        "responses": {
          "200": { "description": "User removed from team successfully" },
          "404": { "description": "Member not found" },
          "401": { "description": "Unauthorized" }
        }
      }
    },
    "/team/performance": {
      "get": {
        "tags": ["Team Management"],
        "summary": "Get team performance metrics",
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          { "name": "teamId", "in": "query", "required": true, "schema": { "type": "string" } },
          { "name": "timeframe", "in": "query", "schema": { "type": "string" } }
        ],
        "responses": {
          "200": { "description": "Team performance metrics retrieved successfully" },
          "401": { "description": "Unauthorized" }
        }
      }
    },
    "/team/productivity": {
      "get": {
        "tags": ["Team Management"],
        "summary": "Get team productivity metrics",
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          { "name": "teamId", "in": "query", "required": true, "schema": { "type": "string" } }
        ],
        "responses": {
          "200": { "description": "Team productivity metrics retrieved successfully" },
          "401": { "description": "Unauthorized" }
        }
      }
    },
    "/team/analytics": {
      "get": {
        "tags": ["Team Management"],
        "summary": "Get team analytics",
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          { "name": "teamId", "in": "query", "required": true, "schema": { "type": "string" } },
          { "name": "startDate", "in": "query", "schema": { "type": "string", "format": "date" } },
          { "name": "endDate", "in": "query", "schema": { "type": "string", "format": "date" } }
        ],
        "responses": {
          "200": { "description": "Team analytics retrieved successfully" },
          "401": { "description": "Unauthorized" }
        }
      }
    },
    "/team/reports": {
      "post": {
        "tags": ["Team Management"],
        "summary": "Generate team report",
        "security": [{ "bearerAuth": [] }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "teamId": { "type": "string" },
                  "reportType": { "type": "string" },
                  "timeframe": { "type": "string" }
                },
                "required": ["teamId", "reportType"]
              }
            }
          }
        },
        "responses": {
          "200": { "description": "Team report generated successfully" },
          "400": { "description": "Validation error" },
          "401": { "description": "Unauthorized" }
        }
      }
    },
    "/manager/assign-task": {
      "post": {
        "tags": ["Team Management"],
        "summary": "Manager assign task to team member",
        "security": [{ "bearerAuth": [] }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "taskId": { "type": "string" },
                  "userId": { "type": "string" },
                  "notes": { "type": "string" }
                },
                "required": ["taskId", "userId"]
              }
            }
          }
        },
        "responses": {
          "200": { "description": "Task assigned successfully" },
          "400": { "description": "Validation error" },
          "401": { "description": "Unauthorized" }
        }
      }
    },
    "/manager/reassign-task": {
      "put": {
        "tags": ["Team Management"],
        "summary": "Manager reassign task to different team member",
        "security": [{ "bearerAuth": [] }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "taskId": { "type": "string" },
                  "newUserId": { "type": "string" },
                  "notes": { "type": "string" }
                },
                "required": ["taskId", "newUserId"]
              }
            }
          }
        },
        "responses": {
          "200": { "description": "Task reassigned successfully" },
          "400": { "description": "Validation error" },
          "401": { "description": "Unauthorized" }
        }
      }
    },
    "/manager/pending-tasks": {
      "get": {
        "tags": ["Team Management"],
        "summary": "Get pending tasks for manager",
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          { "name": "teamId", "in": "query", "schema": { "type": "string" } },
          { "name": "priority", "in": "query", "schema": { "type": "string" } },
          { "name": "status", "in": "query", "schema": { "type": "string" } }
        ],
        "responses": {
          "200": { "description": "Pending tasks retrieved successfully" },
          "401": { "description": "Unauthorized" }
        }
      }
    },
    "/manager/bulk-assign": {
      "post": {
        "tags": ["Team Management"],
        "summary": "Bulk assign tasks to team members",
        "security": [{ "bearerAuth": [] }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "assignments": { "type": "array", "items": { "type": "object" } }
                },
                "required": ["assignments"]
              }
            }
          }
        },
        "responses": {
          "200": { "description": "Tasks bulk assigned successfully" },
          "400": { "description": "Validation error" },
          "401": { "description": "Unauthorized" }
        }
      }
    },
    "/badges": {
      "get": {
        "tags": ["Gamification"],
        "summary": "Get all available badges",
        "security": [{ "bearerAuth": [] }],
        "responses": {
          "200": { 
            "description": "Badges retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": { "type": "string" },
                    "badges": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Badge"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": { "description": "Unauthorized" },
          "500": { "description": "Internal server error" }
        }
      }
    },
    "/badges/user/{id}": {
      "get": {
        "tags": ["Gamification"],
        "summary": "Get badges earned by a specific user",
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          { "name": "id", "in": "path", "required": true, "schema": { "type": "string" } }
        ],
        "responses": {
          "200": { 
            "description": "User badges retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": { "type": "string" },
                    "userId": { "type": "string" },
                    "badges": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/UserBadge"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": { "description": "Unauthorized" },
          "404": { "description": "User not found" },
          "500": { "description": "Internal server error" }
        }
      }
    },
    "/badges/award": {
      "post": {
        "tags": ["Gamification"],
        "summary": "Award a badge to a user",
        "security": [{ "bearerAuth": [] }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "userId": { "type": "string" },
                  "badgeId": { "type": "string" },
                  "reason": { "type": "string" }
                },
                "required": ["userId", "badgeId"]
              }
            }
          }
        },
        "responses": {
          "200": { 
            "description": "Badge awarded successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": { "type": "string" },
                    "awardedBadge": {
                      "$ref": "#/components/schemas/AwardedBadge"
                    }
                  }
                }
              }
            }
          },
          "400": { "description": "Validation error" },
          "401": { "description": "Unauthorized" },
          "404": { "description": "User or badge not found" },
          "500": { "description": "Internal server error" }
        }
      }
    },
    "/achievements": {
      "get": {
        "tags": ["Gamification"],
        "summary": "Get all available achievements",
        "security": [{ "bearerAuth": [] }],
        "responses": {
          "200": { 
            "description": "Achievements retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": { "type": "string" },
                    "achievements": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Achievement"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": { "description": "Unauthorized" },
          "500": { "description": "Internal server error" }
        }
      }
    },
    "/achievements/unlock": {
      "post": {
        "tags": ["Gamification"],
        "summary": "Unlock an achievement for a user",
        "security": [{ "bearerAuth": [] }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "userId": { "type": "string" },
                  "achievementId": { "type": "string" },
                  "unlockedAt": { "type": "string", "format": "date-time" }
                },
                "required": ["userId", "achievementId"]
              }
            }
          }
        },
        "responses": {
          "200": { 
            "description": "Achievement unlocked successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": { "type": "string" },
                    "unlockedAchievement": {
                      "$ref": "#/components/schemas/UnlockedAchievement"
                    }
                  }
                }
              }
            }
          },
          "400": { "description": "Validation error" },
          "401": { "description": "Unauthorized" },
          "404": { "description": "User or achievement not found" },
          "500": { "description": "Internal server error" }
        }
      }
    },
    "/leaderboard": {
      "get": {
        "tags": ["Gamification"],
        "summary": "Get global leaderboard",
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          { "name": "limit", "in": "query", "schema": { "type": "integer", "default": 10, "minimum": 1, "maximum": 100 } },
          { "name": "offset", "in": "query", "schema": { "type": "integer", "default": 0, "minimum": 0 } }
        ],
        "responses": {
          "200": { 
            "description": "Leaderboard retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": { "type": "string" },
                    "leaderboard": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/LeaderboardEntry"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": { "description": "Unauthorized" },
          "500": { "description": "Internal server error" }
        }
      }
    },
    "/leaderboard/team": {
      "get": {
        "tags": ["Gamification"],
        "summary": "Get team leaderboard",
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          { "name": "teamId", "in": "query", "required": true, "schema": { "type": "string" } },
          { "name": "limit", "in": "query", "schema": { "type": "integer", "default": 10, "minimum": 1, "maximum": 100 } },
          { "name": "offset", "in": "query", "schema": { "type": "integer", "default": 0, "minimum": 0 } }
        ],
        "responses": {
          "200": { 
            "description": "Team leaderboard retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": { "type": "string" },
                    "teamId": { "type": "string" },
                    "leaderboard": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/LeaderboardEntry"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": { "description": "Team ID required" },
          "401": { "description": "Unauthorized" },
          "404": { "description": "Team not found" },
          "500": { "description": "Internal server error" }
        }
      }
    },
    "/leaderboard/department": {
      "get": {
        "tags": ["Gamification"],
        "summary": "Get department leaderboard",
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          { "name": "departmentId", "in": "query", "required": true, "schema": { "type": "string" } },
          { "name": "limit", "in": "query", "schema": { "type": "integer", "default": 10, "minimum": 1, "maximum": 100 } },
          { "name": "offset", "in": "query", "schema": { "type": "integer", "default": 0, "minimum": 0 } }
        ],
        "responses": {
          "200": { 
            "description": "Department leaderboard retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": { "type": "string" },
                    "departmentId": { "type": "string" },
                    "leaderboard": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/LeaderboardEntry"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": { "description": "Department ID required" },
          "401": { "description": "Unauthorized" },
          "404": { "description": "Department not found" },
          "500": { "description": "Internal server error" }
        }
      }
    },
    "/leaderboard/weekly": {
      "get": {
        "tags": ["Gamification"],
        "summary": "Get weekly leaderboard",
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          { "name": "week", "in": "query", "schema": { "type": "string", "description": "Week identifier (e.g., '2023-W52')" } },
          { "name": "limit", "in": "query", "schema": { "type": "integer", "default": 10, "minimum": 1, "maximum": 100 } },
          { "name": "offset", "in": "query", "schema": { "type": "integer", "default": 0, "minimum": 0 } }
        ],
        "responses": {
          "200": { 
            "description": "Weekly leaderboard retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": { "type": "string" },
                    "week": { "type": "string" },
                    "leaderboard": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/LeaderboardEntry"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": { "description": "Unauthorized" },
          "500": { "description": "Internal server error" }
        }
      }
    },
    "/leaderboard/monthly": {
      "get": {
        "tags": ["Gamification"],
        "summary": "Get monthly leaderboard",
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          { "name": "month", "in": "query", "schema": { "type": "string", "description": "Month (1-12)" } },
          { "name": "year", "in": "query", "schema": { "type": "string", "description": "Year (e.g., 2023)" } },
          { "name": "limit", "in": "query", "schema": { "type": "integer", "default": 10, "minimum": 1, "maximum": 100 } },
          { "name": "offset", "in": "query", "schema": { "type": "integer", "default": 0, "minimum": 0 } }
        ],
        "responses": {
          "200": { 
            "description": "Monthly leaderboard retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": { "type": "string" },
                    "month": { "type": "string" },
                    "year": { "type": "string" },
                    "leaderboard": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/LeaderboardEntry"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": { "description": "Unauthorized" },
          "500": { "description": "Internal server error" }
        }
      }
    },
    "/streaks/user/{id}": {
      "get": {
        "tags": ["Gamification"],
        "summary": "Get user streaks information",
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          { "name": "id", "in": "path", "required": true, "schema": { "type": "string" } }
        ],
        "responses": {
          "200": { 
            "description": "User streaks retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": { "type": "string" },
                    "userId": { "type": "string" },
                    "streaks": {
                      "$ref": "#/components/schemas/UserStreaks"
                    }
                  }
                }
              }
            }
          },
          "401": { "description": "Unauthorized" },
          "404": { "description": "User not found" },
          "500": { "description": "Internal server error" }
        }
      }
    },
    "/points/add": {
      "post": {
        "tags": ["Gamification"],
        "summary": "Add points to a user",
        "security": [{ "bearerAuth": [] }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "userId": { "type": "string" },
                  "points": { "type": "number", "minimum": 1 },
                  "reason": { "type": "string" },
                  "source": { "type": "string", "enum": ["task", "achievement", "streak", "bonus", "other"] }
                },
                "required": ["userId", "points", "reason"]
              }
            }
          }
        },
        "responses": {
          "200": { 
            "description": "Points added successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": { "type": "string" },
                    "pointsTransaction": {
                      "$ref": "#/components/schemas/PointsTransaction"
                    }
                  }
                }
              }
            }
          },
          "400": { "description": "Validation error" },
          "401": { "description": "Unauthorized" },
          "404": { "description": "User not found" },
          "500": { "description": "Internal server error" }
        }
      }
    },
    "/points/history": {
      "get": {
        "tags": ["Gamification"],
        "summary": "Get points history for a user",
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          { "name": "userId", "in": "query", "required": true, "schema": { "type": "string" } },
          { "name": "limit", "in": "query", "schema": { "type": "integer", "default": 20, "minimum": 1, "maximum": 100 } },
          { "name": "offset", "in": "query", "schema": { "type": "integer", "default": 0, "minimum": 0 } }
        ],
        "responses": {
          "200": { 
            "description": "Points history retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": { "type": "string" },
                    "userId": { "type": "string" },
                    "history": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/PointsHistoryEntry"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": { "description": "User ID required" },
          "401": { "description": "Unauthorized" },
          "404": { "description": "User not found" },
          "500": { "description": "Internal server error" }
        }
      }
    },
    "/streaks/update": {
      "post": {
        "tags": ["Gamification"],
        "summary": "Update user streaks",
        "security": [{ "bearerAuth": [] }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "userId": { "type": "string" },
                  "action": { "type": "string", "enum": ["increment", "reset", "maintain"] },
                  "date": { "type": "string", "format": "date-time" }
                },
                "required": ["userId", "action"]
              }
            }
          }
        },
        "responses": {
          "200": { 
            "description": "Streak updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": { "type": "string" },
                    "streakUpdate": {
                      "$ref": "#/components/schemas/StreakUpdate"
                    }
                  }
                }
              }
            }
          },
          "400": { "description": "Validation error" },
          "401": { "description": "Unauthorized" },
          "404": { "description": "User not found" },
          "500": { "description": "Internal server error" }
        }
      }
    },
    "/timer/start": {
      "post": {
        "tags": ["Timer"],
        "summary": "Start a new timer session",
        "security": [{ "bearerAuth": [] }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "duration": { "type": "number", "minimum": 1, "description": "Timer duration in minutes" },
                  "type": { "type": "string", "enum": ["pomodoro", "short_break", "long_break", "custom"], "default": "pomodoro" },
                  "taskId": { "type": "string", "description": "Associated task ID" },
                  "mode": { "type": "string", "enum": ["pomodoro", "short-break", "long-break"], "description": "Timer mode" }
                },
                "required": ["duration"]
              }
            }
          }
        },
        "responses": {
          "200": { 
            "description": "Timer started successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": { "type": "string" },
                    "session": {
                      "$ref": "#/components/schemas/TimerSession"
                    }
                  }
                }
              }
            }
          },
          "400": { "description": "Validation error" },
          "401": { "description": "Unauthorized" },
          "500": { "description": "Internal server error" }
        }
      }
    },
    "/timer/pause": {
      "post": {
        "tags": ["Timer"],
        "summary": "Pause an active timer session",
        "security": [{ "bearerAuth": [] }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "sessionId": { "type": "string", "description": "Timer session ID to pause" }
                },
                "required": ["sessionId"]
              }
            }
          }
        },
        "responses": {
          "200": { 
            "description": "Timer paused successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": { "type": "string" },
                    "session": {
                      "$ref": "#/components/schemas/PausedTimerSession"
                    }
                  }
                }
              }
            }
          },
          "400": { "description": "Validation error" },
          "401": { "description": "Unauthorized" },
          "404": { "description": "Session not found" },
          "500": { "description": "Internal server error" }
        }
      }
    },
    "/timer/stop": {
      "post": {
        "tags": ["Timer"],
        "summary": "Stop a timer session",
        "security": [{ "bearerAuth": [] }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "sessionId": { "type": "string", "description": "Timer session ID to stop" }
                },
                "required": ["sessionId"]
              }
            }
          }
        },
        "responses": {
          "200": { 
            "description": "Timer stopped successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": { "type": "string" },
                    "session": {
                      "$ref": "#/components/schemas/StoppedTimerSession"
                    }
                  }
                }
              }
            }
          },
          "400": { "description": "Validation error" },
          "401": { "description": "Unauthorized" },
          "404": { "description": "Session not found" },
          "500": { "description": "Internal server error" }
        }
      }
    },
    "/timer/sessions": {
      "get": {
        "tags": ["Timer"],
        "summary": "Get timer sessions for the authenticated user",
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          { "name": "status", "in": "query", "schema": { "type": "string", "enum": ["active", "paused", "completed"], "description": "Filter by session status" } },
          { "name": "limit", "in": "query", "schema": { "type": "integer", "default": 50, "minimum": 1, "maximum": 100, "description": "Maximum number of sessions to return" } },
          { "name": "page", "in": "query", "schema": { "type": "integer", "default": 1, "minimum": 1, "description": "Page number for pagination" } }
        ],
        "responses": {
          "200": { 
            "description": "Timer sessions retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "sessions": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/TimerSession"
                      }
                    },
                    "total": { "type": "integer", "description": "Total number of sessions" },
                    "page": { "type": "integer", "description": "Current page number" },
                    "totalPages": { "type": "integer", "description": "Total number of pages" }
                  }
                }
              }
            }
          },
          "401": { "description": "Unauthorized" },
          "500": { "description": "Internal server error" }
        }
      }
    },
    "/timer/settings": {
      "put": {
        "tags": ["Timer"],
        "summary": "Update timer settings",
        "security": [{ "bearerAuth": [] }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "pomodoroTime": { "type": "number", "minimum": 1, "maximum": 120, "description": "Pomodoro session duration in minutes" },
                  "shortBreakTime": { "type": "number", "minimum": 1, "maximum": 30, "description": "Short break duration in minutes" },
                  "longBreakTime": { "type": "number", "minimum": 1, "maximum": 60, "description": "Long break duration in minutes" },
                  "autoStartBreaks": { "type": "boolean", "description": "Automatically start breaks after pomodoros" },
                  "autoStartPomodoros": { "type": "boolean", "description": "Automatically start pomodoros after breaks" },
                  "soundEnabled": { "type": "boolean", "description": "Enable/disable timer sounds" }
                }
              }
            }
          }
        },
        "responses": {
          "200": { 
            "description": "Timer settings updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": { "type": "string" },
                    "settings": {
                      "$ref": "#/components/schemas/TimerSettings"
                    }
                  }
                }
              }
            }
          },
          "400": { "description": "Validation error" },
          "401": { "description": "Unauthorized" },
          "500": { "description": "Internal server error" }
        }
      }
    },
    "/timer/resume": {
      "post": {
        "tags": ["Timer"],
        "summary": "Resume a paused timer session",
        "security": [{ "bearerAuth": [] }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "sessionId": { "type": "string", "description": "Timer session ID to resume" }
                },
                "required": ["sessionId"]
              }
            }
          }
        },
        "responses": {
          "200": { 
            "description": "Timer resumed successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": { "type": "string" },
                    "session": {
                      "$ref": "#/components/schemas/TimerSession"
                    }
                  }
                }
              }
            }
          },
          "400": { "description": "Validation error" },
          "401": { "description": "Unauthorized" },
          "404": { "description": "Session not found" },
          "500": { "description": "Internal server error" }
        }
      }
    },
    "/timer/stats": {
      "get": {
        "tags": ["Timer"],
        "summary": "Get timer statistics for the authenticated user",
        "security": [{ "bearerAuth": [] }],
        "responses": {
          "200": { 
            "description": "Timer statistics retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TimerStats"
                }
              }
            }
          },
          "401": { "description": "Unauthorized" },
          "500": { "description": "Internal server error" }
        }
      }
    },
    "/timer/current": {
      "get": {
        "tags": ["Timer"],
        "summary": "Get current active timer session",
        "security": [{ "bearerAuth": [] }],
        "responses": {
          "200": { 
            "description": "Current timer session retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TimerSession"
                }
              }
            }
          },
          "401": { "description": "Unauthorized" },
          "500": { "description": "Internal server error" }
        }
      }
    },
    "/focus/enable": {
      "post": {
        "tags": ["Timer"],
        "summary": "Enable focus mode",
        "security": [{ "bearerAuth": [] }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "duration": { "type": "number", "minimum": 15, "maximum": 480, "description": "Focus mode duration in minutes" },
                  "notifications": { "type": "boolean", "description": "Enable notifications during focus mode" }
                }
              }
            }
          }
        },
        "responses": {
          "200": { 
            "description": "Focus mode enabled successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": { "type": "string" },
                    "focusSession": {
                      "$ref": "#/components/schemas/FocusSession"
                    }
                  }
                }
              }
            }
          },
          "400": { "description": "Validation error" },
          "401": { "description": "Unauthorized" },
          "500": { "description": "Internal server error" }
        }
      }
    },
    "/focus/disable": {
      "post": {
        "tags": ["Timer"],
        "summary": "Disable focus mode",
        "security": [{ "bearerAuth": [] }],
        "responses": {
          "200": { 
            "description": "Focus mode disabled successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": { "type": "string" },
                    "focusSession": {
                      "$ref": "#/components/schemas/CompletedFocusSession"
                    }
                  }
                }
              }
            }
          },
          "401": { "description": "Unauthorized" },
          "500": { "description": "Internal server error" }
        }
      }
    },
    "/focus/status": {
      "get": {
        "tags": ["Timer"],
        "summary": "Get focus mode status and statistics",
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          { "name": "userId", "in": "query", "schema": { "type": "string", "description": "User ID to get status for" } }
        ],
        "responses": {
          "200": { 
            "description": "Focus mode status retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": { "type": "string" },
                    "focusStatus": {
                      "$ref": "#/components/schemas/FocusStatus"
                    }
                  }
                }
              }
            }
          },
          "401": { "description": "Unauthorized" },
          "500": { "description": "Internal server error" }
        }
      }
    },
    "/focus/notifications": {
      "post": {
        "tags": ["Timer"],
        "summary": "Configure focus mode notifications",
        "security": [{ "bearerAuth": [] }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "enabled": { "type": "boolean", "description": "Enable or disable notifications" },
                  "types": { "type": "array", "items": { "type": "string", "enum": ["break", "session_end", "focus_reminder"] }, "description": "Types of notifications to receive" },
                  "frequency": { "type": "string", "enum": ["low", "normal", "high"], "description": "Notification frequency" }
                },
                "required": ["enabled"]
              }
            }
          }
        },
        "responses": {
          "200": { 
            "description": "Focus notifications configured successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": { "type": "string" },
                    "notificationSettings": {
                      "$ref": "#/components/schemas/FocusNotificationSettings"
                    }
                  }
                }
              }
            }
          },
          "400": { "description": "Validation error" },
          "401": { "description": "Unauthorized" },
          "500": { "description": "Internal server error" }
        }
      }
    },
    "/kpis/{id}": {
      "get": {
        "tags": ["KPIs"],
        "summary": "Get KPI by ID",
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          { "name": "id", "in": "path", "required": true, "schema": { "type": "string" } }
        ],
        "responses": {
          "200": { "description": "KPI retrieved successfully" },
          "401": { "description": "Unauthorized" },
          "403": { "description": "Access denied" },
          "404": { "description": "KPI not found" },
          "500": { "description": "Internal server error" }
        }
      },
      "put": {
        "tags": ["KPIs"],
        "summary": "Update KPI (employer only)",
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          { "name": "id", "in": "path", "required": true, "schema": { "type": "string" } }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": { "type": "string" },
                  "description": { "type": "string" },
                  "targetValue": { "type": "number" },
                  "assignedTo": { "type": "string" },
                  "period": { "type": "string", "enum": ["weekly", "monthly", "quarterly", "yearly"] }
                }
              }
            }
          }
        },
        "responses": {
          "200": { "description": "KPI updated successfully" },
          "400": { "description": "Validation error" },
          "401": { "description": "Unauthorized" },
          "403": { "description": "Access denied" },
          "404": { "description": "KPI not found" },
          "500": { "description": "Internal server error" }
        }
      },
      "delete": {
        "tags": ["KPIs"],
        "summary": "Delete KPI (employer only)",
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          { "name": "id", "in": "path", "required": true, "schema": { "type": "string" } }
        ],
        "responses": {
          "200": { "description": "KPI deleted successfully" },
          "401": { "description": "Unauthorized" },
          "403": { "description": "Access denied" },
          "404": { "description": "KPI not found" },
          "500": { "description": "Internal server error" }
        }
      }
    },
    "/kpis/calculate": {
      "post": {
        "tags": ["KPIs"],
        "summary": "Calculate KPI metrics",
        "security": [{ "bearerAuth": [] }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "kpiId": { "type": "string", "description": "KPI ID to calculate" },
                  "userId": { "type": "string", "description": "User ID for calculation" },
                  "timeframe": { "type": "string", "enum": ["current", "previous", "custom"], "description": "Timeframe for calculation" }
                },
                "required": ["kpiId", "userId"]
              }
            }
          }
        },
        "responses": {
          "200": { "description": "KPI calculation completed successfully" },
          "400": { "description": "Validation error" },
          "401": { "description": "Unauthorized" },
          "403": { "description": "Access denied" },
          "404": { "description": "KPI not found" },
          "500": { "description": "Internal server error" }
        }
      }
    },
    "/goals": {
      "get": {
        "tags": ["Goals"],
        "summary": "Get all goals",
        "security": [{ "bearerAuth": [] }],
        "responses": {
          "200": { "description": "Goals retrieved successfully" },
          "401": { "description": "Unauthorized" },
          "500": { "description": "Internal server error" }
        }
      },
      "post": {
        "tags": ["Goals"],
        "summary": "Create new goal",
        "security": [{ "bearerAuth": [] }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "title": { "type": "string", "description": "Goal title" },
                  "description": { "type": "string", "description": "Goal description" },
                  "targetDate": { "type": "string", "format": "date", "description": "Target completion date" },
                  "priority": { "type": "string", "enum": ["low", "medium", "high"], "description": "Goal priority" },
                  "category": { "type": "string", "description": "Goal category" }
                },
                "required": ["title", "description", "targetDate"]
              }
            }
          }
        },
        "responses": {
          "201": { "description": "Goal created successfully" },
          "400": { "description": "Validation error" },
          "401": { "description": "Unauthorized" },
          "500": { "description": "Internal server error" }
        }
      }
    },
    "/goals/user/{id}": {
      "get": {
        "tags": ["Goals"],
        "summary": "Get user goals",
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          { "name": "id", "in": "path", "required": true, "schema": { "type": "string" } }
        ],
        "responses": {
          "200": { "description": "User goals retrieved successfully" },
          "401": { "description": "Unauthorized" },
          "500": { "description": "Internal server error" }
        }
      }
    },
    "/goals/{id}": {
      "put": {
        "tags": ["Goals"],
        "summary": "Update goal",
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          { "name": "id", "in": "path", "required": true, "schema": { "type": "string" } }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "title": { "type": "string" },
                  "description": { "type": "string" },
                  "targetDate": { "type": "string", "format": "date" },
                  "priority": { "type": "string", "enum": ["low", "medium", "high"] },
                  "category": { "type": "string" }
                }
              }
            }
          }
        },
        "responses": {
          "200": { "description": "Goal updated successfully" },
          "400": { "description": "Validation error" },
          "401": { "description": "Unauthorized" },
          "500": { "description": "Internal server error" }
        }
      },
      "delete": {
        "tags": ["Goals"],
        "summary": "Delete goal",
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          { "name": "id", "in": "path", "required": true, "schema": { "type": "string" } }
        ],
        "responses": {
          "200": { "description": "Goal deleted successfully" },
          "401": { "description": "Unauthorized" },
          "500": { "description": "Internal server error" }
        }
      }
    },
    "/goals/{id}/progress": {
      "patch": {
        "tags": ["Goals"],
        "summary": "Update goal progress",
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          { "name": "id", "in": "path", "required": true, "schema": { "type": "string" } }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "progress": { "type": "number", "minimum": 0, "maximum": 100, "description": "Progress percentage" },
                  "notes": { "type": "string", "description": "Progress notes" }
                },
                "required": ["progress"]
              }
            }
          }
        },
        "responses": {
          "200": { "description": "Goal progress updated successfully" },
          "400": { "description": "Validation error" },
          "401": { "description": "Unauthorized" },
          "500": { "description": "Internal server error" }
        }
      }
    },
    "/analytics/productivity": {
      "get": {
        "tags": ["Analytics"],
        "summary": "Get productivity analytics",
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          { "name": "userId", "in": "query", "schema": { "type": "string", "description": "User ID to filter analytics" } },
          { "name": "timeframe", "in": "query", "schema": { "type": "string", "enum": ["day", "week", "month", "quarter", "year"], "description": "Timeframe for analytics" } },
          { "name": "period", "in": "query", "schema": { "type": "string", "enum": ["current", "previous", "custom"], "description": "Period for analytics" } }
        ],
        "responses": {
          "200": { "description": "Productivity analytics retrieved successfully" },
          "401": { "description": "Unauthorized" },
          "500": { "description": "Internal server error" }
        }
      }
    },
    "/analytics/efficiency": {
      "get": {
        "tags": ["Analytics"],
        "summary": "Get efficiency analytics",
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          { "name": "userId", "in": "query", "schema": { "type": "string", "description": "User ID to filter analytics" } },
          { "name": "metric", "in": "query", "schema": { "type": "string", "enum": ["overall", "time_management", "task_prioritization", "focus", "collaboration"], "description": "Efficiency metric to analyze" } },
          { "name": "comparison", "in": "query", "schema": { "type": "string", "enum": ["previous_period", "baseline", "target"], "description": "Comparison type" } }
        ],
        "responses": {
          "200": { "description": "Efficiency analytics retrieved successfully" },
          "401": { "description": "Unauthorized" },
          "500": { "description": "Internal server error" }
        }
      }
    },
    "/analytics/quality": {
      "get": {
        "tags": ["Analytics"],
        "summary": "Get quality analytics",
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          { "name": "userId", "in": "query", "schema": { "type": "string", "description": "User ID to filter analytics" } },
          { "name": "qualityMetric", "in": "query", "schema": { "type": "string", "enum": ["overall", "accuracy", "completeness", "timeliness", "customer_satisfaction"], "description": "Quality metric to analyze" } },
          { "name": "timeframe", "in": "query", "schema": { "type": "string", "enum": ["week", "month", "quarter", "year"], "description": "Timeframe for analytics" } }
        ],
        "responses": {
          "200": { "description": "Quality analytics retrieved successfully" },
          "401": { "description": "Unauthorized" },
          "500": { "description": "Internal server error" }
        }
      }
    },
    "/analytics/trends": {
      "get": {
        "tags": ["Analytics"],
        "summary": "Get trends analytics",
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          { "name": "userId", "in": "query", "schema": { "type": "string", "description": "User ID to filter analytics" } },
          { "name": "trendType", "in": "query", "schema": { "type": "string", "enum": ["productivity", "efficiency", "quality", "overall"], "description": "Type of trend to analyze" } },
          { "name": "period", "in": "query", "schema": { "type": "string", "enum": ["3_months", "6_months", "1_year", "custom"], "description": "Period for trend analysis" } }
        ],
        "responses": {
          "200": { "description": "Trends analytics retrieved successfully" },
          "401": { "description": "Unauthorized" },
          "500": { "description": "Internal server error" }
        }
      }
    },
    "/analytics/reports": {
      "post": {
        "tags": ["Analytics"],
        "summary": "Generate analytics reports",
        "security": [{ "bearerAuth": [] }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "reportType": { "type": "string", "enum": ["productivity", "efficiency", "quality", "comprehensive"], "description": "Type of report to generate" },
                  "parameters": { "type": "object", "description": "Report parameters" },
                  "format": { "type": "string", "enum": ["json", "pdf", "csv", "excel"], "description": "Report format" },
                  "timeframe": { "type": "string", "enum": ["week", "month", "quarter", "year"], "description": "Report timeframe" }
                },
                "required": ["reportType"]
              }
            }
          }
        },
        "responses": {
          "200": { "description": "Analytics report generated successfully" },
          "400": { "description": "Validation error" },
          "401": { "description": "Unauthorized" },
          "500": { "description": "Internal server error" }
        }
      }
    },
    "/organization/departments": {
      "get": {
        "tags": ["Organization"],
        "summary": "Get all departments with pagination and filtering",
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          { "name": "page", "in": "query", "schema": { "type": "integer", "default": 1 }, "description": "Page number" },
          { "name": "limit", "in": "query", "schema": { "type": "integer", "default": 20 }, "description": "Items per page" },
          { "name": "search", "in": "query", "schema": { "type": "string" }, "description": "Search by name or description" },
          { "name": "isActive", "in": "query", "schema": { "type": "boolean" }, "description": "Filter by active status" }
        ],
        "responses": {
          "200": {
            "description": "Departments retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": { "type": "string" },
                    "departments": { "type": "array", "items": { "$ref": "#/components/schemas/Department" } },
                    "pagination": {
                      "type": "object",
                      "properties": {
                        "page": { "type": "integer" },
                        "limit": { "type": "integer" },
                        "total": { "type": "integer" },
                        "pages": { "type": "integer" }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": { "description": "Unauthorized" },
          "500": { "description": "Internal server error" }
        }
      },
      "post": {
        "tags": ["Organization"],
        "summary": "Create a new department",
        "security": [{ "bearerAuth": [] }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": { "type": "string", "description": "Department name" },
                  "description": { "type": "string", "description": "Department description" },
                  "code": { "type": "string", "description": "Unique department code" },
                  "head": { "type": "string", "description": "Department head user ID" },
                  "parentDepartment": { "type": "string", "description": "Parent department ID" },
                  "settings": {
                    "type": "object",
                    "properties": {
                      "allowTeamCreation": { "type": "boolean" },
                      "allowUserManagement": { "type": "boolean" },
                      "allowKPIManagement": { "type": "boolean" }
                    }
                  },
                  "color": { "type": "string", "description": "Department color" },
                  "icon": { "type": "string", "description": "Department icon" }
                },
                "required": ["name"]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Department created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": { "type": "string" },
                    "department": { "$ref": "#/components/schemas/Department" }
                  }
                }
              }
            }
          },
          "400": { "description": "Validation error" },
          "401": { "description": "Unauthorized" },
          "403": { "description": "Forbidden - Insufficient permissions" },
          "500": { "description": "Internal server error" }
        }
      }
    },
    "/organization/departments/{id}": {
      "get": {
        "tags": ["Organization"],
        "summary": "Get department by ID",
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          { "name": "id", "in": "path", "required": true, "schema": { "type": "string" }, "description": "Department ID" }
        ],
        "responses": {
          "200": {
            "description": "Department retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": { "type": "string" },
                    "department": { "$ref": "#/components/schemas/Department" }
                  }
                }
              }
            }
          },
          "401": { "description": "Unauthorized" },
          "404": { "description": "Department not found" },
          "500": { "description": "Internal server error" }
        }
      },
      "put": {
        "tags": ["Organization"],
        "summary": "Update department by ID",
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          { "name": "id", "in": "path", "required": true, "schema": { "type": "string" }, "description": "Department ID" }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": { "type": "string", "description": "Department name" },
                  "description": { "type": "string", "description": "Department description" },
                  "code": { "type": "string", "description": "Unique department code" },
                  "head": { "type": "string", "description": "Department head user ID" },
                  "parentDepartment": { "type": "string", "description": "Parent department ID" },
                  "settings": {
                    "type": "object",
                    "properties": {
                      "allowTeamCreation": { "type": "boolean" },
                      "allowUserManagement": { "type": "boolean" },
                      "allowKPIManagement": { "type": "boolean" }
                    }
                  },
                  "color": { "type": "string", "description": "Department color" },
                  "icon": { "type": "string", "description": "Department icon" }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Department updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": { "type": "string" },
                    "department": { "$ref": "#/components/schemas/Department" }
                  }
                }
              }
            }
          },
          "400": { "description": "Validation error" },
          "401": { "description": "Unauthorized" },
          "403": { "description": "Forbidden - Insufficient permissions" },
          "404": { "description": "Department not found" },
          "500": { "description": "Internal server error" }
        }
      },
      "delete": {
        "tags": ["Organization"],
        "summary": "Delete department by ID",
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          { "name": "id", "in": "path", "required": true, "schema": { "type": "string" }, "description": "Department ID" }
        ],
        "responses": {
          "200": {
            "description": "Department deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": { "type": "string" },
                    "departmentId": { "type": "string" }
                  }
                }
              }
            }
          },
          "400": { "description": "Cannot delete department with active users or teams" },
          "401": { "description": "Unauthorized" },
          "403": { "description": "Forbidden - Insufficient permissions" },
          "404": { "description": "Department not found" },
          "500": { "description": "Internal server error" }
        }
      }
    },
    "/organization/departments/{id}/members": {
      "get": {
        "tags": ["Organization"],
        "summary": "Get department members with pagination and filtering",
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          { "name": "id", "in": "path", "required": true, "schema": { "type": "string" }, "description": "Department ID" },
          { "name": "page", "in": "query", "schema": { "type": "integer", "default": 1 }, "description": "Page number" },
          { "name": "limit", "in": "query", "schema": { "type": "integer", "default": 20 }, "description": "Items per page" },
          { "name": "role", "in": "query", "schema": { "type": "string" }, "description": "Filter by user role" },
          { "name": "search", "in": "query", "schema": { "type": "string" }, "description": "Search by name or email" }
        ],
        "responses": {
          "200": {
            "description": "Department members retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": { "type": "string" },
                    "departmentId": { "type": "string" },
                    "members": { "type": "array", "items": { "$ref": "#/components/schemas/User" } },
                    "pagination": {
                      "type": "object",
                      "properties": {
                        "page": { "type": "integer" },
                        "limit": { "type": "integer" },
                        "total": { "type": "integer" },
                        "pages": { "type": "integer" }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": { "description": "Unauthorized" },
          "404": { "description": "Department not found" },
          "500": { "description": "Internal server error" }
        }
      }
    },
    "/organization/roles": {
      "get": {
        "tags": ["Organization"],
        "summary": "Get all roles with pagination and filtering",
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          { "name": "page", "in": "query", "schema": { "type": "integer", "default": 1 }, "description": "Page number" },
          { "name": "limit", "in": "query", "schema": { "type": "integer", "default": 20 }, "description": "Items per page" },
          { "name": "search", "in": "query", "schema": { "type": "string" }, "description": "Search by name or description" },
          { "name": "department", "in": "query", "schema": { "type": "string" }, "description": "Filter by department" },
          { "name": "isActive", "in": "query", "schema": { "type": "boolean" }, "description": "Filter by active status" }
        ],
        "responses": {
          "200": {
            "description": "Roles retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": { "type": "string" },
                    "roles": { "type": "array", "items": { "$ref": "#/components/schemas/Role" } },
                    "pagination": {
                      "type": "object",
                      "properties": {
                        "page": { "type": "integer" },
                        "limit": { "type": "integer" },
                        "total": { "type": "integer" },
                        "pages": { "type": "integer" }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": { "description": "Unauthorized" },
          "500": { "description": "Internal server error" }
        }
      },
      "post": {
        "tags": ["Organization"],
        "summary": "Create a new role",
        "security": [{ "bearerAuth": [] }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": { "type": "string", "description": "Role name" },
                  "description": { "type": "string", "description": "Role description" },
                  "permissions": { "type": "array", "items": { "$ref": "#/components/schemas/Permission" } },
                  "department": { "type": "string", "description": "Department ID" },
                  "team": { "type": "string", "description": "Team ID" },
                  "level": { "type": "integer", "description": "Hierarchy level" },
                  "color": { "type": "string", "description": "Role color" },
                  "icon": { "type": "string", "description": "Role icon" }
                },
                "required": ["name"]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Role created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": { "type": "string" },
                    "role": { "$ref": "#/components/schemas/Role" }
                  }
                }
              }
            }
          },
          "400": { "description": "Validation error" },
          "401": { "description": "Unauthorized" },
          "403": { "description": "Forbidden - Insufficient permissions" },
          "500": { "description": "Internal server error" }
        }
      }
    },
    "/organization/roles/{id}": {
      "get": {
        "tags": ["Organization"],
        "summary": "Get role by ID",
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          { "name": "id", "in": "path", "required": true, "schema": { "type": "string" }, "description": "Role ID" }
        ],
        "responses": {
          "200": {
            "description": "Role retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": { "type": "string" },
                    "role": { "$ref": "#/components/schemas/Role" }
                  }
                }
              }
            }
          },
          "401": { "description": "Unauthorized" },
          "404": { "description": "Role not found" },
          "500": { "description": "Internal server error" }
        }
      },
      "put": {
        "tags": ["Organization"],
        "summary": "Update role by ID",
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          { "name": "id", "in": "path", "required": true, "schema": { "type": "string" }, "description": "Role ID" }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": { "type": "string", "description": "Role name" },
                  "description": { "type": "string", "description": "Role description" },
                  "permissions": { "type": "array", "items": { "$ref": "#/components/schemas/Permission" } },
                  "department": { "type": "string", "description": "Department ID" },
                  "team": { "type": "string", "description": "Team ID" },
                  "level": { "type": "integer", "description": "Hierarchy level" },
                  "color": { "type": "string", "description": "Role color" },
                  "icon": { "type": "string", "description": "Role icon" }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Role updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": { "type": "string" },
                    "role": { "$ref": "#/components/schemas/Role" }
                  }
                }
              }
            }
          },
          "400": { "description": "Validation error or cannot modify system roles" },
          "401": { "description": "Unauthorized" },
          "403": { "description": "Forbidden - Insufficient permissions" },
          "404": { "description": "Role not found" },
          "500": { "description": "Internal server error" }
        }
      },
      "delete": {
        "tags": ["Organization"],
        "summary": "Delete role by ID",
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          { "name": "id", "in": "path", "required": true, "schema": { "type": "string" }, "description": "Role ID" }
        ],
        "responses": {
          "200": {
            "description": "Role deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": { "type": "string" },
                    "roleId": { "type": "string" }
                  }
                }
              }
            }
          },
          "400": { "description": "Cannot delete system roles or roles assigned to users" },
          "401": { "description": "Unauthorized" },
          "403": { "description": "Forbidden - Insufficient permissions" },
          "404": { "description": "Role not found" },
          "500": { "description": "Internal server error" }
        }
      }
    },
    "/organization/users/{id}/roles": {
      "post": {
        "tags": ["Organization"],
        "summary": "Assign roles to user",
        "security": [{ "bearerAuth": [] }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "roleIds": { "type": "array", "items": { "type": "string" }, "description": "Array of role IDs to assign" },
                  "department": { "type": "string", "description": "Department ID to assign user to" }
                },
                "required": ["roleIds"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Roles assigned successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": { "type": "string" },
                    "user": { "$ref": "#/components/schemas/User" },
                    "assignedRoles": { "type": "array", "items": { "$ref": "#/components/schemas/Role" } }
                  }
                }
              }
            }
          },
          "400": { "description": "Validation error" },
          "401": { "description": "Unauthorized" },
          "403": { "description": "Forbidden - Insufficient permissions" },
          "404": { "description": "User not found" },
          "500": { "description": "Internal server error" }
        }
      }
    },
    "/api/reports/tasks": {
      "get": {
        "tags": ["Reports"],
        "summary": "Get task reports",
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          { "name": "userId", "in": "query", "schema": { "type": "string" }, "description": "User ID to filter tasks" },
          { "name": "timeframe", "in": "query", "schema": { "type": "string", "enum": ["week", "month", "quarter", "year"], "default": "month" }, "description": "Report timeframe" },
          { "name": "status", "in": "query", "schema": { "type": "string", "enum": ["all", "pending", "inProgress", "completed", "overdue"], "default": "all" }, "description": "Task status filter" },
          { "name": "priority", "in": "query", "schema": { "type": "string", "enum": ["all", "high", "medium", "low"], "default": "all" }, "description": "Task priority filter" }
        ],
        "responses": {
          "200": {
            "description": "Task report generated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": { "type": "string" },
                    "report": { "$ref": "#/components/schemas/TaskReport" }
                  }
                }
              }
            }
          },
          "401": { "description": "Unauthorized" },
          "500": { "description": "Internal server error" }
        }
      }
    },
    "/api/reports/productivity": {
      "get": {
        "tags": ["Reports"],
        "summary": "Get productivity reports",
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          { "name": "userId", "in": "query", "schema": { "type": "string" }, "description": "User ID to filter productivity data" },
          { "name": "timeframe", "in": "query", "schema": { "type": "string", "enum": ["week", "month", "quarter", "year"], "default": "month" }, "description": "Report timeframe" },
          { "name": "metrics", "in": "query", "schema": { "type": "string", "enum": ["all", "efficiency", "quality", "collaboration"], "default": "all" }, "description": "Specific metrics to include" }
        ],
        "responses": {
          "200": {
            "description": "Productivity report generated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": { "type": "string" },
                    "report": { "$ref": "#/components/schemas/ProductivityReport" }
                  }
                }
              }
            }
          },
          "401": { "description": "Unauthorized" },
          "500": { "description": "Internal server error" }
        }
      }
    },
    "/api/reports/team": {
      "get": {
        "tags": ["Reports"],
        "summary": "Get team reports",
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          { "name": "teamId", "in": "query", "schema": { "type": "string" }, "description": "Team ID to generate report for" },
          { "name": "timeframe", "in": "query", "schema": { "type": "string", "enum": ["week", "month", "quarter", "year"], "default": "month" }, "description": "Report timeframe" },
          { "name": "reportType", "in": "query", "schema": { "type": "string", "enum": ["overview", "performance", "collaboration", "productivity"], "default": "overview" }, "description": "Type of team report" }
        ],
        "responses": {
          "200": {
            "description": "Team report generated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": { "type": "string" },
                    "report": { "$ref": "#/components/schemas/TeamReport" }
                  }
                }
              }
            }
          },
          "401": { "description": "Unauthorized" },
          "500": { "description": "Internal server error" }
        }
      }
    },
    "/api/reports/performance": {
      "get": {
        "tags": ["Reports"],
        "summary": "Get performance reports",
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          { "name": "userId", "in": "query", "schema": { "type": "string" }, "description": "User ID to filter performance data" },
          { "name": "timeframe", "in": "query", "schema": { "type": "string", "enum": ["week", "month", "quarter", "year"], "default": "month" }, "description": "Report timeframe" },
          { "name": "comparison", "in": "query", "schema": { "type": "string", "enum": ["previous_period", "same_period_last_year", "custom"], "default": "previous_period" }, "description": "Comparison period" }
        ],
        "responses": {
          "200": {
            "description": "Performance report generated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": { "type": "string" },
                    "report": { "$ref": "#/components/schemas/PerformanceReport" }
                  }
                }
              }
            }
          },
          "401": { "description": "Unauthorized" },
          "500": { "description": "Internal server error" }
        }
      }
    },
    "/api/reports/export": {
      "post": {
        "tags": ["Reports"],
        "summary": "Export reports",
        "security": [{ "bearerAuth": [] }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "reportType": { "type": "string", "enum": ["tasks", "productivity", "team", "performance"], "required": true, "description": "Type of report to export" },
                  "format": { "type": "string", "enum": ["pdf", "excel", "csv", "json"], "default": "pdf", "description": "Export format" },
                  "parameters": { "type": "object", "description": "Report parameters" },
                  "timeframe": { "type": "string", "enum": ["week", "month", "quarter", "year"], "default": "month", "description": "Report timeframe" }
                },
                "required": ["reportType"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Report export initiated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": { "type": "string" },
                    "exportJob": { "$ref": "#/components/schemas/ExportJob" }
                  }
                }
              }
            }
          },
          "400": { "description": "Validation error" },
          "401": { "description": "Unauthorized" },
          "500": { "description": "Internal server error" }
        }
      }
    },
    "/api/export/tasks": {
      "post": {
        "tags": ["Export"],
        "summary": "Export tasks data",
        "security": [{ "bearerAuth": [] }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "format": { "type": "string", "enum": ["json", "csv", "excel"], "default": "json", "description": "Export format" },
                  "filters": { "type": "object", "description": "Filter criteria for tasks" },
                  "dateRange": { "type": "object", "properties": { "start": { "type": "string", "format": "date" }, "end": { "type": "string", "format": "date" } }, "description": "Date range for export" }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Tasks exported successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "tasks": { "type": "array", "items": { "$ref": "#/components/schemas/Task" } },
                    "format": { "type": "string" }
                  }
                }
              }
            }
          },
          "400": { "description": "Validation error" },
          "401": { "description": "Unauthorized" },
          "500": { "description": "Internal server error" }
        }
      }
    },
    "/api/export/users": {
      "post": {
        "tags": ["Export"],
        "summary": "Export users data",
        "security": [{ "bearerAuth": [] }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "format": { "type": "string", "enum": ["json", "csv", "excel"], "default": "json", "description": "Export format" },
                  "filters": { "type": "object", "description": "Filter criteria for users" },
                  "dateRange": { "type": "object", "properties": { "start": { "type": "string", "format": "date" }, "end": { "type": "string", "format": "date" } }, "description": "Date range for export" }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Users exported successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "users": { "type": "array", "items": { "$ref": "#/components/schemas/User" } },
                    "format": { "type": "string" }
                  }
                }
              }
            }
          },
          "400": { "description": "Validation error" },
          "401": { "description": "Unauthorized" },
          "403": { "description": "Forbidden - Admin only" },
          "500": { "description": "Internal server error" }
        }
      }
    },
    "/api/export/analytics": {
      "post": {
        "tags": ["Export"],
        "summary": "Export analytics data",
        "security": [{ "bearerAuth": [] }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "format": { "type": "string", "enum": ["json", "csv", "excel"], "default": "json", "description": "Export format" },
                  "type": { "type": "string", "enum": ["productivity", "performance", "all"], "default": "all", "description": "Type of analytics to export" },
                  "dateRange": { "type": "object", "properties": { "start": { "type": "string", "format": "date" }, "end": { "type": "string", "format": "date" } }, "description": "Date range for export" },
                  "userId": { "type": "string", "description": "User ID to filter analytics" },
                  "teamId": { "type": "string", "description": "Team ID to filter analytics" }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Analytics exported successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "analytics": { "type": "object", "description": "Analytics data" },
                    "format": { "type": "string" }
                  }
                }
              }
            }
          },
          "400": { "description": "Validation error" },
          "401": { "description": "Unauthorized" },
          "500": { "description": "Internal server error" }
        }
      }
    },
    "/api/export/custom": {
      "post": {
        "tags": ["Export"],
        "summary": "Custom export with user-defined parameters",
        "security": [{ "bearerAuth": [] }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "collections": { "type": "array", "items": { "type": "string" }, "required": true, "description": "Collections to export" },
                  "format": { "type": "string", "enum": ["json", "csv", "excel"], "default": "json", "description": "Export format" },
                  "filters": { "type": "object", "description": "Filter criteria for each collection" },
                  "dateRange": { "type": "object", "properties": { "start": { "type": "string", "format": "date" }, "end": { "type": "string", "format": "date" } }, "description": "Date range for export" },
                  "fields": { "type": "array", "items": { "type": "string" }, "description": "Specific fields to include" },
                  "sortBy": { "type": "string", "default": "createdAt", "description": "Field to sort by" },
                  "sortOrder": { "type": "string", "enum": ["asc", "desc"], "default": "desc", "description": "Sort order" },
                  "limit": { "type": "integer", "default": 1000, "description": "Maximum records to export" }
                },
                "required": ["collections"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Custom export completed successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": { "type": "object", "description": "Exported data by collection" },
                    "format": { "type": "string" }
                  }
                }
              }
            }
          },
          "400": { "description": "Validation error" },
          "401": { "description": "Unauthorized" },
          "500": { "description": "Internal server error" }
        }
      }
    },
    "/api/settings": {
      "get": {
        "tags": ["System & Settings"],
        "summary": "Get system settings",
        "security": [{ "bearerAuth": [] }],
        "responses": {
          "200": {
            "description": "System settings retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": { "type": "string" },
                    "settings": { "$ref": "#/components/schemas/SystemSettings" }
                  }
                }
              }
            }
          },
          "401": { "description": "Unauthorized" },
          "403": { "description": "Forbidden - Admin/Employer only" },
          "500": { "description": "Internal server error" }
        }
      },
      "put": {
        "tags": ["System & Settings"],
        "summary": "Update system settings",
        "security": [{ "bearerAuth": [] }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "appName": { "type": "string", "description": "Application name" },
                  "version": { "type": "string", "description": "Application version" },
                  "maintenanceMode": { "type": "boolean", "description": "Maintenance mode status" },
                  "features": { "$ref": "#/components/schemas/FeatureSettings" },
                  "limits": { "$ref": "#/components/schemas/SystemLimits" },
                  "integrations": { "$ref": "#/components/schemas/IntegrationSettings" }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "System settings updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": { "type": "string" },
                    "settings": { "$ref": "#/components/schemas/SystemSettings" }
                  }
                }
              }
            }
          },
          "400": { "description": "Validation error" },
          "401": { "description": "Unauthorized" },
          "403": { "description": "Forbidden - Admin/Employer only" },
          "500": { "description": "Internal server error" }
        }
      }
    },
    "/api/settings/features": {
      "get": {
        "tags": ["System & Settings"],
        "summary": "Get feature settings",
        "security": [{ "bearerAuth": [] }],
        "responses": {
          "200": {
            "description": "Feature settings retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": { "type": "string" },
                    "features": { "$ref": "#/components/schemas/FeatureSettings" }
                  }
                }
              }
            }
          },
          "401": { "description": "Unauthorized" },
          "500": { "description": "Internal server error" }
        }
      },
      "put": {
        "tags": ["System & Settings"],
        "summary": "Update feature settings",
        "security": [{ "bearerAuth": [] }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "ai": { "$ref": "#/components/schemas/AIFeatureSettings" },
                  "gamification": { "$ref": "#/components/schemas/GamificationSettings" },
                  "pomodoro": { "$ref": "#/components/schemas/PomodoroSettings" },
                  "realTime": { "$ref": "#/components/schemas/RealTimeSettings" }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Feature settings updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": { "type": "string" },
                    "features": { "$ref": "#/components/schemas/FeatureSettings" }
                  }
                }
              }
            }
          },
          "400": { "description": "Validation error" },
          "401": { "description": "Unauthorized" },
          "403": { "description": "Forbidden - Admin/Employer only" },
          "500": { "description": "Internal server error" }
        }
      }
    },
    "/api/preferences": {
      "get": {
        "tags": ["System & Settings"],
        "summary": "Get user preferences",
        "security": [{ "bearerAuth": [] }],
        "responses": {
          "200": {
            "description": "User preferences retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": { "type": "string" },
                    "preferences": { "$ref": "#/components/schemas/UserPreferences" }
                  }
                }
              }
            }
          },
          "401": { "description": "Unauthorized" },
          "500": { "description": "Internal server error" }
        }
      },
      "put": {
        "tags": ["System & Settings"],
        "summary": "Update user preferences",
        "security": [{ "bearerAuth": [] }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "theme": { "type": "string", "enum": ["light", "dark", "auto"], "description": "UI theme preference" },
                  "language": { "type": "string", "description": "Language preference" },
                  "timezone": { "type": "string", "description": "Timezone preference" },
                  "dateFormat": { "type": "string", "description": "Date format preference" },
                  "timeFormat": { "type": "string", "enum": ["12h", "24h"], "description": "Time format preference" },
                  "notifications": { "$ref": "#/components/schemas/NotificationPreferences" },
                  "dashboard": { "$ref": "#/components/schemas/DashboardPreferences" },
                  "privacy": { "$ref": "#/components/schemas/PrivacyPreferences" },
                  "productivity": { "$ref": "#/components/schemas/ProductivityPreferences" }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User preferences updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": { "type": "string" },
                    "preferences": { "$ref": "#/components/schemas/UserPreferences" }
                  }
                }
              }
            }
          },
          "400": { "description": "Validation error" },
          "401": { "description": "Unauthorized" },
          "500": { "description": "Internal server error" }
        }
      }
    },
    "/api/preferences/reset": {
      "post": {
        "tags": ["System & Settings"],
        "summary": "Reset user preferences to defaults",
        "security": [{ "bearerAuth": [] }],
        "responses": {
          "200": {
            "description": "User preferences reset successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": { "type": "string" },
                    "preferences": { "$ref": "#/components/schemas/UserPreferences" }
                  }
                }
              }
            }
          },
          "401": { "description": "Unauthorized" },
          "500": { "description": "Internal server error" }
        }
      }
    },
    "/api/search": {
      "get": {
        "tags": ["Search"],
        "summary": "General search across all entities",
        "description": "Search across tasks, users, and messages with relevance scoring",
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          {
            "name": "query",
            "in": "query",
            "required": true,
            "schema": { "type": "string", "minLength": 2 },
            "description": "Search query (minimum 2 characters)"
          },
          {
            "name": "type",
            "in": "query",
            "schema": { "type": "string", "enum": ["all", "task", "user", "message"] },
            "description": "Type of entities to search (default: all)"
          },
          {
            "name": "limit",
            "in": "query",
            "schema": { "type": "integer", "default": 20, "minimum": 1, "maximum": 100 },
            "description": "Maximum number of results to return"
          },
          {
            "name": "filters",
            "in": "query",
            "schema": { "type": "string" },
            "description": "JSON string of additional filters"
          }
        ],
        "responses": {
          "200": {
            "description": "Search completed successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": { "type": "string" },
                    "results": {
                      "$ref": "#/components/schemas/SearchResults"
                    }
                  }
                }
              }
            }
          },
          "400": { "description": "Invalid search query" },
          "401": { "description": "Unauthorized" },
          "500": { "description": "Internal server error" }
        }
      }
    },
    "/api/search/tasks": {
      "get": {
        "tags": ["Search"],
        "summary": "Search tasks specifically",
        "description": "Search tasks with advanced filtering and pagination",
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          {
            "name": "query",
            "in": "query",
            "required": true,
            "schema": { "type": "string", "minLength": 2 },
            "description": "Search query (minimum 2 characters)"
          },
          {
            "name": "status",
            "in": "query",
            "schema": { "type": "string", "enum": ["all", "pending", "in_progress", "completed", "cancelled"] },
            "description": "Filter by task status"
          },
          {
            "name": "priority",
            "in": "query",
            "schema": { "type": "string", "enum": ["all", "low", "medium", "high", "urgent"] },
            "description": "Filter by task priority"
          },
          {
            "name": "assignedTo",
            "in": "query",
            "schema": { "type": "string" },
            "description": "Filter by assigned user ID"
          },
          {
            "name": "deadline",
            "in": "query",
            "schema": { "type": "string", "enum": ["all", "overdue", "today", "week"] },
            "description": "Filter by deadline status"
          },
          {
            "name": "tags",
            "in": "query",
            "schema": { "type": "array", "items": { "type": "string" } },
            "description": "Filter by tags"
          },
          {
            "name": "limit",
            "in": "query",
            "schema": { "type": "integer", "default": 20, "minimum": 1, "maximum": 100 },
            "description": "Maximum number of results to return"
          },
          {
            "name": "page",
            "in": "query",
            "schema": { "type": "integer", "default": 1, "minimum": 1 },
            "description": "Page number for pagination"
          }
        ],
        "responses": {
          "200": {
            "description": "Task search completed successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": { "type": "string" },
                    "results": {
                      "$ref": "#/components/schemas/TaskSearchResults"
                    }
                  }
                }
              }
            }
          },
          "400": { "description": "Invalid search query" },
          "401": { "description": "Unauthorized" },
          "500": { "description": "Internal server error" }
        }
      }
    },
    "/api/search/users": {
      "get": {
        "tags": ["Search"],
        "summary": "Search users specifically",
        "description": "Search users with advanced filtering and pagination",
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          {
            "name": "query",
            "in": "query",
            "required": true,
            "schema": { "type": "string", "minLength": 2 },
            "description": "Search query (minimum 2 characters)"
          },
          {
            "name": "department",
            "in": "query",
            "schema": { "type": "string" },
            "description": "Filter by department ID"
          },
          {
            "name": "role",
            "in": "query",
            "schema": { "type": "string" },
            "description": "Filter by role ID"
          },
          {
            "name": "skills",
            "in": "query",
            "schema": { "type": "array", "items": { "type": "string" } },
            "description": "Filter by skills"
          },
          {
            "name": "location",
            "in": "query",
            "schema": { "type": "string" },
            "description": "Filter by location"
          },
          {
            "name": "limit",
            "in": "query",
            "schema": { "type": "integer", "default": 20, "minimum": 1, "maximum": 100 },
            "description": "Maximum number of results to return"
          },
          {
            "name": "page",
            "in": "query",
            "schema": { "type": "integer", "default": 1, "minimum": 1 },
            "description": "Page number for pagination"
          }
        ],
        "responses": {
          "200": {
            "description": "User search completed successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": { "type": "string" },
                    "results": {
                      "$ref": "#/components/schemas/UserSearchResults"
                    }
                  }
                }
              }
            }
          },
          "400": { "description": "Invalid search query" },
          "401": { "description": "Unauthorized" },
          "500": { "description": "Internal server error" }
        }
      }
    },
    "/api/search/messages": {
      "get": {
        "tags": ["Search"],
        "summary": "Search messages specifically",
        "description": "Search chat messages with advanced filtering and pagination",
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          {
            "name": "query",
            "in": "query",
            "required": true,
            "schema": { "type": "string", "minLength": 2 },
            "description": "Search query (minimum 2 characters)"
          },
          {
            "name": "conversationId",
            "in": "query",
            "schema": { "type": "string" },
            "description": "Filter by conversation ID"
          },
          {
            "name": "sender",
            "in": "query",
            "schema": { "type": "string" },
            "description": "Filter by sender ID"
          },
          {
            "name": "dateRange",
            "in": "query",
            "schema": { "type": "string" },
            "description": "Date range filter (format: 'startDate to endDate')"
          },
          {
            "name": "type",
            "in": "query",
            "schema": { "type": "string", "enum": ["all", "text", "file", "image", "video"] },
            "description": "Filter by message type"
          },
          {
            "name": "limit",
            "in": "query",
            "schema": { "type": "integer", "default": 20, "minimum": 1, "maximum": 100 },
            "description": "Maximum number of results to return"
          },
          {
            "name": "page",
            "in": "query",
            "schema": { "type": "integer", "default": 1, "minimum": 1 },
            "description": "Page number for pagination"
          }
        ],
        "responses": {
          "200": {
            "description": "Message search completed successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": { "type": "string" },
                    "results": {
                      "$ref": "#/components/schemas/MessageSearchResults"
                    }
                  }
                }
              }
            }
          },
          "400": { "description": "Invalid search query" },
          "401": { "description": "Unauthorized" },
          "500": { "description": "Internal server error" }
        }
      }
    }
  }
}